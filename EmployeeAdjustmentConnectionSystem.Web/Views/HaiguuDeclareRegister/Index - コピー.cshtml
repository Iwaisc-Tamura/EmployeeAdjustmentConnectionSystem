@using EmployeeAdjustmentConnectionSystem.COM.Util.Convert
@using EmployeeAdjustmentConnectionSystem.COM.Enum
@using EmployeeAdjustmentConnectionSystem.COM.Models
@model HuyouDeclareRegisterViewModels
@{
    ViewBag.Title = "扶養控除等申告書";
}


@Styles.Render("~/Content/css/huyou")

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">


<!--タイトル-->
@using (Html.BeginForm("Index", "SelfDeclareRegisterA20", null, FormMethod.Post, new { @class = "form-horizontal" ,@style = "zoom:120%"})) {    @*</!--1.2倍の拡大表示-->>*@
    <h4 class="text-center">@Html.DisplayFor(m => m.Head.SheetYear) 年度　扶養控除等申告書</h4>
    @Html.HiddenFor(m => m.Head.ManageNo)
    @Html.HiddenFor(m => m.Head.SheetYear)
    @Html.HiddenFor(m => m.Head.EmployeeNo)
    @Html.HiddenFor(m => m.Head.CompetencyNo)
    @Html.HiddenFor(m => m.Head.InputMode)
    @Html.HiddenFor(m => m.Head.AuthButton)
    @Html.HiddenFor(m => m.Head.CancelButton)

  <!-- ヘッダ -->
    <div class="row">
        <!--名前、社員番号等-->
        <div class="col-xs-9">
            <table class="table table-bordered ">
                <thead>
                    <tr class="h34">
                        <td class="info w80">氏名</td>
                        <td class="info w40">社員番号</td>
                        <td class="info w150">所属</td>
                        <td class="info w50">役職</td>
                        <td class="info w30">資格</td>
                        <td class="info w50">職群</td>
                        <td class="info w50">入社年月日</td>
                        <td class="info w50">当社在籍<br>年数</td>
                        <td class="info w40">現職経験<br>年数</td>
                        <td class="info w50">生年月日</td>
                        <td class="info w30">年齢</td>
                    </tr>
                </thead>
                <tbody>
                    <tr class="h34">
                        <td>@Html.DisplayFor(m => m.Head.Name)</td>
                        <td>@Html.DisplayFor(m => m.Head.EmployeeNo)</td>
                        <td>@Html.DisplayFor(m => m.Head.DepartmentName)</td>
                        <td>@Html.DisplayFor(m => m.Head.PostName)</td>
                        <td>@Html.DisplayFor(m => m.Head.CompetencyName)</td>
                        <td>@Html.DisplayFor(m => m.Head.DutyName)</td>
                        <td>@Html.DisplayFor(m => m.Head.HireDateView)</td>
                        <td>@Html.DisplayFor(m => m.Head.EnrollmentMonthsView)</td>
                        <td>@Html.DisplayFor(m => m.Head.ExperienceMonthsView)</td>
                        <td>@Html.DisplayFor(m => m.Head.BirthdayView)</td>
                        <td>@Html.DisplayFor(m => m.Head.AgeView)</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <!--面談の印鑑-->
        <div class="col-xs-2">
            <table class="table table-bordered">
                <thead>
                    @*承認ボタンヘルパー*@
                    @helper setButton(SelfDeclareMode auth, SelfDeclareMode mode, string name, string value) {
                        @Html.Raw("<td class=\"info\">")
                        if (auth == mode) {
                            //if ((auth ==SelfDeclareMode.AtoCSelfSign) || (Model.Head.StatusType == SelfDeclareStatusType.SecondaryEdit)) {
                                var dmyId = "dmy" + value;
                                <button type="button" name="Signature" id="@dmyId" value="@value" class="btn-default btn-xs">@name</button>

                            //}
                        } else {
                            @name
                        }
                        @Html.Raw("</td>")
}
                    <tr class="h34">
                        @setButton(Model.Head.AuthButton, SelfDeclareMode.AtoCSelfSign, "本人", "11")
                        @setButton(Model.Head.AuthButton, SelfDeclareMode.AtoCBossSign, "上司", "12")
                    </tr>
                </thead>
                <tbody>
                    @*CancelButtonヘルパー*@
                    @helper setCancelButton(string name, SelfDeclareMode cancel, SelfDeclareMode mode, string value) {
                        @Html.Raw("<td>")
                        @Html.Raw(name)
                        if (cancel == mode) {
                            var dmycId = "dmyc" + value;
                            var dmycValue = "c" + value;
                            <button type="button" class="btn btn-default btn-xs" name="SignCancel" id="@dmycId" value="@dmycValue"><i class="glyphicon glyphicon-remove"></i></button>
                        }
                        @Html.Raw("</td>")
                    }
                    <tr class="h34">
                        @setCancelButton(Model.Head.AtoCSelfSign, Model.Head.CancelButton, SelfDeclareMode.AtoCSelfSign, "11")
                        @setCancelButton(Model.Head.AtoCBossSign, Model.Head.CancelButton, SelfDeclareMode.AtoCBossSign, "12")
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    @*データ日時取得*@
    string str = "";
    str = String.Format("{0}年12月31日現在のデータを使用しています。", Model.Head.SheetYear);

    <!--ボタンエリア-->
    <div class="row">
        <!--ボタン-->
        <div class="col-xs-3">
            <button type="button" name="DmySave" value="途中保存" class="btn-default pull-left" style="margin:0 5px 10px 0;" id="dmysave">途中保存</button>
            <button type="submit" name="Back" value="戻る" class="btn-default pull-left" id="backbutton" style="margin:0 5px 10px 0;margin-left:5px;">戻る</button>

            @if (Model.Head.InputMode == SelfDeclareMode.AtoCSelfSign) {
                <button type="button" name="DmyPrevDataCopy" value="前回データ取得" class="btn-default pull-left" style="margin-left:5px;" id="dmyprevdatacopy">前回データ取得</button>
            }

        </div>
        <div class="col-xs-8">
            <div>&#9632;@str<br /></div>
            &#9632;入力を途中で中断する際は途中保存ボタンで保存して下さい。登録・承認については該当するボタンを押下して下さい。<br />
            &#9632;戻るボタンを押下するとTOPへ戻ります。<br />
            &#9632;前回データ取得ボタンを押下すると前回の自己申告書データで上書きします。(存在しない場合は何もしません。)
        </div>
    </div>

    
    <!--定義-->
    //共通入力モード
    var TextName = new Dictionary<string, object>() { { "class", "form-control select-other" }, { "maxlength", "20" }, { "style", "width:80px;" }, { "readonly", "readonly" } };
    var TextWord1 = new Dictionary<string, object>() { { "class", "form-control select-other" }, { "maxlength", "20" }, { "readonly", "readonly" } };
    var TextMoney1 = new Dictionary<string, object>() { { "class", "form-control select-other" }, { "maxlength", "20" }, { "readonly", "readonly" } };
    switch (Model.Head.InputMode) {
        case SelfDeclareMode.AtoCSelfSign:
            TextName.Remove("readonly");
            TextWord1.Remove("readonly");
            TextMoney1.Remove("readonly");
            break;
        default:
            TextName.Remove("readonly");
            TextWord1.Remove("readonly");
            TextMoney1.Remove("readonly");
            break;
    }

    
    
    var PostNo1 = new Dictionary<string, object>() { { "class", " form-control " }, { "style", "width:30px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "3" }, { "readonly", "readonly" } };
    var PostNo2 = new Dictionary<string, object>() { { "class", " form-control " }, { "style", "width:45px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "4" }, { "readonly", "readonly" } };
    var attr1 = new Dictionary<string, object>() { { "class", "form-control" }, { "rows", "6" }, { "maxlength", "500" }, { "readonly", "readonly" } };
    var ReadOption = true;
    switch (Model.Head.InputMode) {
        case SelfDeclareMode.AtoCSelfSign:

            //設定本人・面談者時
            //計画・方針入力化
            PostNo1.Remove("readonly");
            PostNo2.Remove("readonly");
            attr1.Remove("readonly");
            ReadOption = false;

            break;
        default:
            //上記以外 ReadOnly
            break;
    }

    var Healthattr1 = new Dictionary<string, object>() { { "class", "form-control select-other" }, { "maxlength", "10" }, { "readonly", "readonly" } };
    switch (Model.Head.InputMode) {
        case SelfDeclareMode.AtoCSelfSign:

            //設定本人・面談者時
            //計画・方針入力化
            if (Model.Head.Health.Length > 2) {
                if ((Model.Head.Health.Substring(0, 1) == "2") || (Model.Head.Health.Substring(0, 1) == "3")) {
                    Healthattr1.Remove("readonly");
                }
            }

            break;
        default:
            //上記以外 ReadOnly
            break;
    }
    
    
    
    
    //住所形態リスト
    var addressItems = new SelectListItem[] {
            new SelectListItem() { Value="1:持家(UR)", Text="1:持家(UR)" },
            new SelectListItem() { Value="2:持家(その他)", Text="2:持家(その他)" },
            new SelectListItem() { Value="3:賃貸(UR)", Text="3:賃貸(UR)" },
            new SelectListItem() { Value="4:賃貸(借上社宅)", Text="4:賃貸(借上社宅)" },
            new SelectListItem() { Value="5:賃貸(その他)", Text="5:賃貸(その他)" },
            new SelectListItem() { Value="6:親の家", Text="6:親の家" }
    };

    @helper setDdl2(bool isRead, int cnt, string name, string value, SelectListItem[] selItems) {
        <div class="form-group-custom">
            @{
                var id = string.Format("Head.{0}", name);
                if (isRead) {
                    @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly" })
                } else {
                    @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", "")
                }
            }
        </div>
    }

    //続柄リスト
    var familyItems = new SelectListItem[] {
                            new SelectListItem() { Value="11:配偶者(夫)", Text="11:配偶者(夫)" },
                            new SelectListItem() { Value="12:配偶者(妻)", Text="12:配偶者(妻)" },
                            new SelectListItem() { Value="21:長男", Text="21:長男" },
                            new SelectListItem() { Value="22:次男", Text="22:次男" },
                            new SelectListItem() { Value="23:三男", Text="23:三男" },
                            new SelectListItem() { Value="24:四男", Text="24:四男" },
                            new SelectListItem() { Value="25:五男", Text="25:五男" },
                            new SelectListItem() { Value="26:六男", Text="26:六男" },
                            new SelectListItem() { Value="27:七男", Text="27:七男" },
                            new SelectListItem() { Value="28:八男", Text="28:八男" },
                            new SelectListItem() { Value="29:九男", Text="29:九男" },
                            new SelectListItem() { Value="31:長女", Text="31:長女" },
                            new SelectListItem() { Value="32:二女", Text="32:二女" },
                            new SelectListItem() { Value="33:三女", Text="33:三女" },
                            new SelectListItem() { Value="34:四女", Text="34:四女" },
                            new SelectListItem() { Value="35:五女", Text="35:五女" },
                            new SelectListItem() { Value="36:六女", Text="36:六女" },
                            new SelectListItem() { Value="37:七女", Text="37:七女" },
                            new SelectListItem() { Value="38:八女", Text="38:八女" },
                            new SelectListItem() { Value="39:九女", Text="39:九女" },
                            new SelectListItem() { Value="41:父", Text="41:父" },
                            new SelectListItem() { Value="42:母", Text="42:母" },
                            new SelectListItem() { Value="43:義父", Text="43:義父" },
                            new SelectListItem() { Value="44:義母", Text="44:義母" },
                            new SelectListItem() { Value="45:祖父", Text="45:祖父" },
                            new SelectListItem() { Value="46:祖母", Text="46:祖母" },
                            new SelectListItem() { Value="47:義祖父", Text="47:義祖父" },
                            new SelectListItem() { Value="48:義祖母", Text="48:義祖母" },
                            new SelectListItem() { Value="60:孫", Text="60:孫" },
                            new SelectListItem() { Value="71:兄", Text="71:兄" },
                            new SelectListItem() { Value="72:姉", Text="72:姉" },
                            new SelectListItem() { Value="73:弟", Text="73:弟" },
                            new SelectListItem() { Value="74:妹", Text="74:妹" },
                            new SelectListItem() { Value="75:義兄", Text="75:義兄" },
                            new SelectListItem() { Value="76:義姉", Text="76:義姉" },
                            new SelectListItem() { Value="77:義弟", Text="77:義弟" },
                            new SelectListItem() { Value="78:義妹", Text="78:義妹" },
                            new SelectListItem() { Value="81:叔父", Text="81:叔父" },
                            new SelectListItem() { Value="82:叔母", Text="82:叔母" },
                            new SelectListItem() { Value="83:甥", Text="83:甥" },
                            new SelectListItem() { Value="84:姪", Text="84:姪" },
                            new SelectListItem() { Value="ZZ:その他", Text="ZZ:その他" }
            };

    //同居人数リスト
    var familyCountItems = new SelectListItem[] {
                        new SelectListItem() { Value="0", Text="0" },
                        new SelectListItem() { Value="1", Text="1" },
                        new SelectListItem() { Value="2", Text="2" },
                        new SelectListItem() { Value="3", Text="3" },
                        new SelectListItem() { Value="4", Text="4" },
                        new SelectListItem() { Value="5", Text="5" },
                        new SelectListItem() { Value="6", Text="6" },
                        new SelectListItem() { Value="7", Text="7" },
                        new SelectListItem() { Value="8", Text="8" }
    };
    @helper setFamilyDdl1(bool isRead, int cnt, string name, string value, SelectListItem[] selItems) {
        <div class="form-inline">
            @{
                var id = string.Format("Body.{0}", name);
                if (isRead) {
                    @Html.TextBox(id, value, new { @class = "form-control", @style = "width:50px;height:16px;", @readonly = "readonly" })<label class="w30" style="font-weight:normal;">　名</label>
                } else {
                    @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", new { style = "width: 50px; vertical-align:top;" })<label class="w30" style="font-weight:normal;">　名</label>
                }
            }
        </div>
}
    @helper setFamilyDdl2(bool isRead, int cnt, string name, string value, SelectListItem[] selItems) {
        <div class="h24 form-inline">
            @{
                var id = string.Format("Head.{0}", name);
                if (isRead) {
                    <label class="w10" style="font-weight:normal;">@cnt</label> @Html.TextBox(id, value, new { @class = "form-control", @style = "width:90px;height:16px;", @size = "2", @rows = "1", @readonly = "readonly" })
                } else {
                    <label class="w10" style="font-weight:normal;">@cnt</label> @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", new { @class = "familyItems-select" })
                }
            }
        </div>
}
    //CheckBox出力ヘルパー
    @helper setCheck(bool isRead, int cnt, string name, string value) {
        if (isRead) {
            @Html.Hidden(string.Format("Head.{0}_{1}", name, cnt), value)
            @Html.Raw(string.Format("<span style=\"font-size: 17px;\">{0}</span>", (value == "1" ? "■" : "□")))
        } else {
            @Html.CheckBox(string.Format("Head.{0}_{1}", name, cnt), (value == "1" ? true : false), new { tabindex = 1, @style = "margin-top:0px;" })
        }
    }



    <!-- 本人情報 -->
    @*定義*@

    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/ja.js"></script>
    <script>
        flatpickr.localize(flatpickr.l10ns.ja);
        flatpickr('#calendarTEST');
    </script>




    var EmployeeNo = new Dictionary<string, object>() { { "class", "form-control select-other" }, { "maxlength", "20" }, { "readonly", "readonly" } };
    var FamilyName = new Dictionary<string, object>() { { "class", "form-control select-other" }, { "style", "width:80px;" }, { "maxlength", "20" }, { "readonly", "readonly" } };
    var FirstName = new Dictionary<string, object>() { { "class", "form-control select-other" }, { "style", "width:80px;" }, { "maxlength", "20" }, { "readonly", "readonly" } };
    switch (Model.Head.InputMode) {
        case SelfDeclareMode.AtoCSelfSign:

            //設定本人・面談者時
            //計画・方針入力化
            if (Model.Head.Health.Length > 2) {
                if ((Model.Head.Health.Substring(0, 1) == "2") || (Model.Head.Health.Substring(0, 1) == "3")) {
                    FamilyName.Remove("readonly");
                    FirstName.Remove("readonly");
                    ReadOption = false;
                }
            }

            break;
        default:
            //上記以外 ReadOnly
            FamilyName.Remove("readonly");
            FirstName.Remove("readonly");
            ReadOption = false;
            break;
    }

    <div class="row">
        <div class="col-xs-8">
            <table class="table table-bordered">
                <thead>
                    <tr class="content-label-h1">
                        <td colspan="8">
                            本人情報
                        </td>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-8">
            <table class="table table-bordered">
                <colgroup>
                    <col style="width:10%;" />
                    <col style="width:15%;" />
                    <col style="width:25%;" />
                    <col style="width:10%;" />
                    <col style="width:10%;" />
                    <col style="width:10%;" />
                    <col style="width:10%;" />
                    <col style="width:10%;" />
                </colgroup>

                <thead></thead>
                <tbody>
                    <tr>
                        <td colspan="8">@setCheck(ReadOption, 1, "FamilyDependent", Model.Head.FamilyDependent_1)　給与支払者に提出済みの個人番号と相違ありません。</td>
                    </tr>
                    <tr>
                        <td colspan="2" class="content-label-b1">社員番号</td>
                        <td colspan="6" class="form-inline">@Html.TextAreaFor(m => m.Head.EmployeeNo, EmployeeNo)</td>
                    </tr>
                    <tr>
                        <td colspan="2" class="content-label-b1">所属番号</td>
                        <td colspan="6" class="form-inline">@Html.TextAreaFor(m => m.Head.DepartmentNo, TextWord1)</td>
                    </tr>
                    <tr>
                        <td colspan="2" class="content-label-b1">氏名</td>
                        <td colspan="6" class="form-inline">姓 @Html.TextAreaFor(m => m.Head.Name, TextName)　名 @Html.TextAreaFor(m => m.Head.Name, TextName)</td>
                    </tr>
                    <tr>
                        <td colspan="2" class="content-label-b1">フリガナ</td>
                        <td colspan="6" class="form-inline">姓 @Html.TextAreaFor(m => m.Head.Name, TextName)　名 @Html.TextAreaFor(m => m.Head.Name, TextName)</td>
                    </tr>
                    <tr>
                        <td colspan="2" class="content-label-b1">生年月日</td>
                        <td colspan="6" class="form-inline">@Html.TextAreaFor(m => m.Head.BirthdayView, TextName)</td>
                    </tr>
                    <tr>
                        <td rowspan="2" colspan="1" class="content-label-b1">世帯主</td>
                        <td rowspan="1" colspan="1" class="content-label-b1">氏名</td>
                        <td colspan="6" class="form-inline"></td>
                    </tr>
                        <tr>
                            <td rowspan="1" colspan="1" class="content-label-b1">あなたとの続柄</td>
                            <td colspan="6" class="form-inline"></td>
                        </tr>
                    <tr>
                        <td colspan="2" class="content-label-b1">住所又は居所</td>
                        <td colspan="6" class="form-inline"></td>
                    </tr>
                    <tr>
                        <td colspan="2" class="content-label-b1">配偶者の有無</td>
                        <td colspan="6" class="form-inline">
                            <group class="inline-radio">
                                <input type="radio" name="member" id="select_radio1"><label class="radio-label-1" for="select_radio1">あり</label>
                                <input type="radio" name="member" id="select_radio2" checked><label class="radio-label-1" for="select_radio2">なし</label>
                            </group>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <h4 style="margin-top:20px;">1 本人の状況</h4>
    <!-- 住所 -->
    <div class="row">

        <div class="col-xs-4">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td>
                            現住所
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <div class="h24 form-inline">
                                〒
                                @Html.TextBoxFor(m => m.Head.PostalCode_1, PostNo1)
                                -
                                @Html.TextBoxFor(m => m.Head.PostalCode_2, PostNo2)
                            </div>
                            @Html.TextAreaFor(m => m.Head.Address, attr1)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-xs-2">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td>
                            住所形態
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @setDdl2(ReadOption, 1, "AddressType", Model.Head.AddressType, addressItems)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- 家族の状況 -->
    <div class="row">
        @*定義*@
        <script type="text/javascript">
            $(function () {
                var selectarea = $("form select.familyItems-select");
                var selectward = $("form input.family-other1");
                $(selectarea).change(function () {
                    switch ($(this).attr("id")) {
                        case "Head_Relationship_1":
                            selectward = $("form input.family-other1");
                            break;
                        case "Head_Relationship_2":
                            selectward = $("form input.family-other2");
                            break;
                        case "Head_Relationship_3":
                            selectward = $("form input.family-other3");
                            break;
                        case "Head_Relationship_4":
                            selectward = $("form input.family-other4");
                            break;
                        case "Head_Relationship_5":
                            selectward = $("form input.family-other5");
                            break;
                        case "Head_Relationship_6":
                            selectward = $("form input.family-other6");
                            break;
                        case "Head_Relationship_7":
                            selectward = $("form input.family-other7");
                            break;
                        case "Head_Relationship_8":
                            selectward = $("form input.family-other8");
                            break;
                        default:
                            selectward = "";
                    }
                    if ($(this).val().substr(0, 2) == "ZZ") {
                        $(selectward).removeAttr("readonly");
                    } else {
                        $(selectward).attr("readonly", "readonly").val("");
                    }
                });
            });
        </script>

        @{
            //入力モード
            //家族年齢
            var attrFamilyAge = new Dictionary<string, object>() { { "class", " form-control" }, { "type", "text" }, { "onKeyup", "this.value=this.value.replace(/[^0-9]+/i,'')" }, { "style", "width:30px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "3" }, { "readonly", "readonly" } };
            //家族職業・学年
            var attrFamilyContents = new Dictionary<string, object>() { { "class", " form-control" }, { "style", "width:150px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            //家族続柄その他
            var familyOtherattr1 = new Dictionary<string, object>() { { "class", " form-control family-other1 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr2 = new Dictionary<string, object>() { { "class", " form-control family-other2 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr3 = new Dictionary<string, object>() { { "class", " form-control family-other3 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr4 = new Dictionary<string, object>() { { "class", " form-control family-other4 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr5 = new Dictionary<string, object>() { { "class", " form-control family-other5 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr6 = new Dictionary<string, object>() { { "class", " form-control family-other6 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr7 = new Dictionary<string, object>() { { "class", " form-control family-other7 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr8 = new Dictionary<string, object>() { { "class", " form-control family-other8 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };

            switch (Model.Head.InputMode) {
                        case SelfDeclareMode.AtoCSelfSign:

                    //本人
                    if (Model.Head.Relationship_1.Length > 2) {
                        if (Model.Head.Relationship_1.Substring(0, 2) == "ZZ") {
                            familyOtherattr1.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_2.Length > 2) {
                        if (Model.Head.Relationship_2.Substring(0, 2) == "ZZ") {
                            familyOtherattr2.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_3.Length > 2) {
                        if (Model.Head.Relationship_3.Substring(0, 2) == "ZZ") {
                            familyOtherattr3.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_4.Length > 2) {
                        if (Model.Head.Relationship_4.Substring(0, 2) == "ZZ") {
                            familyOtherattr4.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_5.Length > 2) {
                        if (Model.Head.Relationship_5.Substring(0, 2) == "ZZ") {
                            familyOtherattr5.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_6.Length > 2) {
                        if (Model.Head.Relationship_6.Substring(0, 2) == "ZZ") {
                            familyOtherattr6.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_7.Length > 2) {
                        if (Model.Head.Relationship_7.Substring(0, 2) == "ZZ") {
                            familyOtherattr7.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_8.Length > 2) {
                        if (Model.Head.Relationship_8.Substring(0, 2) == "ZZ") {
                            familyOtherattr8.Remove("readonly");
                        }
                    }
                    attrFamilyAge.Remove("readonly");
                    attrFamilyContents.Remove("readonly");
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }


        }

        <div class="col-xs-6">
            <table class="table table-bordered" vertical-align="top">
                <colgroup>
                    <col style="width:100px;" />
                    <col style="width:120px;" />
                    <col style="width:30px;" />
                    <col style="width:130px;" />
                    <col style="width:30px;" />
                    <col style="width:30px;" />
                </colgroup>
                <thead>
                    <tr class="info">
                        <td colspan="6">
                            家族の状況(本人を除く)
                        </td>
                    </tr>
                    <tr class="">
                        <td style="border-style:none;" colspan="2">続柄</td>
                        <td style="border-style:none;">年齢</td>
                        <td style="border-style:none;">職業・学年</td>
                        <td style="border-style:none;">同居</td>
                        <td style="border-style:none;">扶養</td>
                    </tr>
                </thead>
                <tbody>
                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 1, "Relationship_1", Model.Head.Relationship_1, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_1, familyOtherattr1)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_1, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_1, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 1, "FamilyLodger", Model.Head.FamilyLodger_1)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 1, "FamilyDependent", Model.Head.FamilyDependent_1)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 2, "Relationship_2", Model.Head.Relationship_2, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_2, familyOtherattr2)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_2, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_2, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 2, "FamilyLodger", Model.Head.FamilyLodger_2)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 2, "FamilyDependent", Model.Head.FamilyDependent_2)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 3, "Relationship_3", Model.Head.Relationship_3, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_3, familyOtherattr3)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_3, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_3, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 3, "FamilyLodger", Model.Head.FamilyLodger_3)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 3, "FamilyDependent", Model.Head.FamilyDependent_3)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 4, "Relationship_4", Model.Head.Relationship_4, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_4, familyOtherattr4)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_4, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_4, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 4, "FamilyLodger", Model.Head.FamilyLodger_4)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 4, "FamilyDependent", Model.Head.FamilyDependent_4)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 5, "Relationship_5", Model.Head.Relationship_5, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_5, familyOtherattr5)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_5, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_5, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 5, "FamilyLodger", Model.Head.FamilyLodger_5)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 5, "FamilyDependent", Model.Head.FamilyDependent_5)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 6, "Relationship_6", Model.Head.Relationship_6, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_6, familyOtherattr6)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_6, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_6, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 6, "FamilyLodger", Model.Head.FamilyLodger_6)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 6, "FamilyDependent", Model.Head.FamilyDependent_6)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 7, "Relationship_7", Model.Head.Relationship_7, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_7, familyOtherattr7)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_7, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_7, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 7, "FamilyLodger", Model.Head.FamilyLodger_7)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 7, "FamilyDependent", Model.Head.FamilyDependent_7)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 8, "Relationship_8", Model.Head.Relationship_8, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_8, familyOtherattr8)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_8, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_8, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 8, "FamilyLodger", Model.Head.FamilyLodger_8)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 8, "FamilyDependent", Model.Head.FamilyDependent_8)
                        </td>
                    </tr>

                </tbody>
            </table>
        </div>
    </div>

    <!-- 健康状態 -->
    <div class="row">
        @*定義*@
        <script type="text/javascript">
            $(function () {
                var selectarea = $("form select.prefecture");
                var selectward = $("form textarea.select-other");
                $(selectarea).change(function () {
                    var area = $(this).val().substr(0, 1);
                    if ((area == "2")||(area == "3")) {
                        $(selectward).removeAttr("readonly");
                    } else {
                        $(selectward).attr("readonly", "readonly").val("");
                    }
                });
            });
        </script>

        @{

    //健康状態リスト
    var HealthItems = new SelectListItem[] {
                    new SelectListItem() { Value="1:問題なし", Text="1:問題なし" },
                    new SelectListItem() { Value="2:不順(軽度)", Text="2:不順(軽度)" },
                    new SelectListItem() { Value="3:不順", Text="3:不順"}
            };

            @helper setHealthDdl1(bool isRead, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Head.{0}", name);
                        if (isRead) {
                            @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly" })
                        } else {
                            @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", new { @class = "prefecture", style = "width: 90px; vertical-align:top;" })
                        }
                    }
                </div>
}
        }

        <div class="col-xs-5">
            <table class="table table-bordered" vertical-align="top">
                <thead>
                    <tr class="info">
                        <td colspan="2">
                            健康状態（心身両面）
                        </td>
                    </tr>
                    <tr class="info">
                        <td>
                            状態
                        </td>
                        <td>
                            不順の状態
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="vertical-align:top">
                            @setHealthDdl1(ReadOption, "Health", Model.Head.Health, HealthItems)
                        </td>
                        <td>
                            @Html.TextAreaFor(m => m.Head.UnHealthContent, Healthattr1)
                        </td>
                </tbody>
            </table>
        </div>
    </div>


    <h4 style="margin-top:20px;">2 担当職務について</h4>
    <!-- 担当職務について -->
    <div class="row">
	    @*定義*@
	    @{
            //入力モード
	        var question1 = new Dictionary<string, object>() { { "class", "form-control" }, { "rows", "4" }, { "maxlength", "500" }, { "readonly", "readonly" } };
	        switch (Model.Head.InputMode) {
	            case SelfDeclareMode.AtoCSelfSign:
	                //設定本人・面談者時
	                //計画・方針入力化
                    question1.Remove("readonly");
	                break;

	            default:
	                //上記以外 ReadOnly
	                break;
	        }

            //業務状況判断リスト
            var GyoumuHandanItems1 = new SelectListItem[] {
                    new SelectListItem() { Value="1:難しい", Text="1:難しい" },
                    new SelectListItem() { Value="2:やや難しい", Text="2:やや難しい" },
                    new SelectListItem() { Value="3:普通", Text="3:普通" },
                    new SelectListItem() { Value="4:やや易しい", Text="4:やや易しい" },
                    new SelectListItem() { Value="5:易しい", Text="5:易しい"}
            };
            var GyoumuHandanItems2 = new SelectListItem[] {
                    new SelectListItem() { Value="1:多すぎる", Text="1:多すぎる" },
                    new SelectListItem() { Value="2:やや多い", Text="2:やや多い" },
                    new SelectListItem() { Value="3:適当", Text="3:適当" },
                    new SelectListItem() { Value="4:やや少ない", Text="4:やや少ない" },
                    new SelectListItem() { Value="5:少ない", Text="5:少ない"}
            };
            var GyoumuHandanItems3 = new SelectListItem[] {
                    new SelectListItem() { Value="1:大いに活かしている", Text="1:大いに活かしている" },
                    new SelectListItem() { Value="2:まあまあ活かしている", Text="2:まあまあ活かしている" },
                    new SelectListItem() { Value="4:あまり活かしていない", Text="4:あまり活かしていない" },
                    new SelectListItem() { Value="5:ほとんど活かしていない", Text="5:ほとんど活かしていない"}
            };
            var GyoumuHandanItems4 = new SelectListItem[] {
                    new SelectListItem() { Value="1:非常にある", Text="1:非常にある" },
                    new SelectListItem() { Value="2:まあまあ興味がある", Text="2:まあまあ興味がある" },
                    new SelectListItem() { Value="4:あまり興味がない", Text="4:あまり興味がない" },
                    new SelectListItem() { Value="5:ほとんど興味がない", Text="5:ほとんど興味がない"}
            };
            var GyoumuHandanItems5 = new SelectListItem[] {
                    new SelectListItem() { Value="1:大いに発揮している", Text="1:大いに発揮している" },
                    new SelectListItem() { Value="2:ほぼ発揮している", Text="2:ほぼ発揮している" },
                    new SelectListItem() { Value="4:あまり発揮していない", Text="4:あまり発揮していない" },
                    new SelectListItem() { Value="5:発揮していない", Text="5:発揮していない"}
            };
            var GyoumuHandanItems6 = new SelectListItem[] {
                    new SelectListItem() { Value="1:非常に適している", Text="1:非常に適している" },
                    new SelectListItem() { Value="2:概ね適している", Text="2:概ね適している" },
                    new SelectListItem() { Value="4:あまり適していない", Text="4:あまり適していない" },
                    new SelectListItem() { Value="5:適していない", Text="5:適していない"}
            };
            var GyoumuHandanItems7 = new SelectListItem[] {
                    new SelectListItem() { Value="1:適応している", Text="1:適応している" },
                    new SelectListItem() { Value="2:概ね適応している", Text="2:概ね適応している" },
                    new SelectListItem() { Value="4:あまり適応していない", Text="4:あまり適応していない" },
                    new SelectListItem() { Value="5:適応していない", Text="5:適応していない"}
            };
            @helper setGyoumuHandanDdl(bool isRead, int cnt, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 200px;height:16px; vertical-align:top;" })
                        } else {
                            @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", new { @class = "prefecture2" , style = "width: 200px; vertical-align:top;" })
                        }
                    }
                </div>
            }
	    }


        <div class="col-xs-6">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td class="col-xs-1">
                            (1) 現在の担当職務の内容について、主なものを具体的に記入してください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @Html.TextAreaFor(m => m.Body.ChargeDuty_1, question1)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-5">
                <table class="table table-bordered">
                    <colgroup>
                      <col style="width:80px;" />
                      <col style="width:200px;" />
                    </colgroup>
                    <thead>
                        <tr class="info">
                            <td colspan="2">
                                (2) あなたが現在担当している職務の状況を判断し、適当と思われるものを選んでください。<br>
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td style="vertical-align:top ;border-style:none ;">
                                <label style="font-weight:normal;">職務の難易度(質)は</label>
                            </td>
                            <td style="vertical-align:top;border-style:none ;">
                                @setGyoumuHandanDdl(ReadOption, 1, "ChargeDuty_2_1", Model.Body.ChargeDuty_2_1, GyoumuHandanItems1)
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align:top ;border-style:none ;">
                                <label style="font-weight:normal;">職務の量は</label>
                            </td>
                            <td style="vertical-align:top;border-style:none ;">
                                @setGyoumuHandanDdl(ReadOption, 1, "ChargeDuty_2_2", Model.Body.ChargeDuty_2_2, GyoumuHandanItems2)
                            </td>
                        </tr>

                        <tr>
                            <td style="vertical-align:top ;border-style:none ;">
                                <label style="font-weight:normal;">今までの経験は</label>
                            </td>
                            <td style="vertical-align:top;border-style:none ;">
                                @setGyoumuHandanDdl(ReadOption, 1, "ChargeDuty_2_3", Model.Body.ChargeDuty_2_3, GyoumuHandanItems3)
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align:top ;border-style:none ;">
                                <label style="font-weight:normal;">職務に対する興味は</label>
                            </td>
                            <td style="vertical-align:top;border-style:none ;">
                                @setGyoumuHandanDdl(ReadOption, 1, "ChargeDuty_2_4", Model.Body.ChargeDuty_2_4, GyoumuHandanItems4)
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align:top ;border-style:none ;">
                                <label style="font-weight:normal;">保有能力の発揮度合い</label>
                            </td>
                            <td style="vertical-align:top;border-style:none ;">
                                @setGyoumuHandanDdl(ReadOption, 1, "ChargeDuty_2_5", Model.Body.ChargeDuty_2_5, GyoumuHandanItems5)
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align:top ;border-style:none ;">
                                <label style="font-weight:normal;">職務と自分との適性は</label>
                            </td>
                            <td style="vertical-align:top;border-style:none ;">
                                @setGyoumuHandanDdl(ReadOption, 1, "ChargeDuty_2_6", Model.Body.ChargeDuty_2_6, GyoumuHandanItems6)
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align:top ;border-style:none ;">
                                <label style="font-weight:normal;">職場への適応度合い</label>
                            </td>
                            <td style="vertical-align:top;border-style:none ;">
                                @setGyoumuHandanDdl(ReadOption, 1, "ChargeDuty_2_7", Model.Body.ChargeDuty_2_7, GyoumuHandanItems7)
                            </td>
                        </tr>
                    </tbody>
                </table>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-6">
                <table class="table table-bordered">
                    <thead>
                        <tr class="info">
                            <td>
                                (3) （前問４，５を選択した人）その理由及び対応策があればその内容を具体的に記入してください。<br>
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                @Html.TextAreaFor(m => m.Body.ChargeDuty_3, question1)
                            </td>
                        </tr>
                    </tbody>
                </table>
        </div>
    </div>

    <!-- 適性について -->
    <h4 style="margin-top:20px;">3 適性について</h4>
    <div class="row">
	    @*定義*@
        <script type="text/javascript">
            $(function () {
                var selectarea = $("form select.tekisei-select1");
                var selectward = $("form textarea.tekisei-other1");
                $(selectarea).change(function () {
                    if (document.getElementById("Body_Aptitude_1_1_1").value.substr(0, 1) == "8" || document.getElementById("Body_Aptitude_1_1_2").value.substr(0, 1) == "8") {
                        $("form textarea.tekisei-other1").removeAttr("readonly");
                    } else {
                        $("form textarea.tekisei-other1").attr("readonly", "readonly").val("");
                    }
                });
                $("form select.tekisei-select2").change(function () {
                    if (document.getElementById("Body_Aptitude_1_2_1").value.substr(0, 1) == "8" || document.getElementById("Body_Aptitude_1_2_2").value.substr(0, 1) == "8") {
                        $("form textarea.tekisei-other2").removeAttr("readonly");
                    } else {
                        $("form textarea.tekisei-other2").attr("readonly", "readonly").val("");
                    }
                });
            });
        </script>
	    @{
            //入力モード
            var question2 = new Dictionary<string, object>() { { "class", "form-control tekisei-other1" }, { "rows", "3" }, { "maxlength", "500" }, { "readonly", "readonly" } };
            var question3 = new Dictionary<string, object>() { { "class", "form-control tekisei-other2" }, { "rows", "3" }, { "maxlength", "500" }, { "readonly", "readonly" } };
	        switch (Model.Head.InputMode) {
	            case SelfDeclareMode.AtoCSelfSign:
	                //設定本人・面談者時
	                //計画・方針入力化
                    if ((Model.Body.Aptitude_1_1_1.Substring(0, 1) == "8") || (Model.Body.Aptitude_1_1_2.Substring(0, 1) == "8")) {
                        question2.Remove("readonly");
                    }
                    if ((Model.Body.Aptitude_1_2_1.Substring(0, 1) == "8") || (Model.Body.Aptitude_1_2_2.Substring(0, 1) == "8")) {
                        question3.Remove("readonly");
                    }


                    break;
	            default:
	                //上記以外 ReadOnly
	                break;
	        }

            var Shokumuattr1 = new Dictionary<string, object>() { { "class", " form-control" }, { "style", "width:150px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var Tekiseiattr1 = new Dictionary<string, object>() { { "class", "form-control select-other1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var Tekiseiattr2 = new Dictionary<string, object>() { { "class", "form-control select-other1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:
                    Shokumuattr1.Remove("readonly");
                    Tekiseiattr1.Remove("readonly");
                    Tekiseiattr2.Remove("readonly");
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }

            @helper setTekisei1(bool isRead,int cnt, string label, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            <div style="display:flex;">
                                <label class="w90" style="font-weight:normal;">@label</label> @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 230px;height:16px; vertical-align:top;" })
                            </div>
                        } else {
                            <label class="w90" style="font-weight:normal;">@label</label> @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", new { @class = "tekisei-select1" , style = "width: 230px; vertical-align:top;" })
                        }
                    }
                </div>
            }

            @helper setTekisei2(bool isRead,int cnt, string label, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            <div style="display:flex;">
                                <label class="w90" style="font-weight:normal;">@label</label> @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 230px;height:16px; vertical-align:top;" })
                            </div>
                        } else {
                            <label class="w90" style="font-weight:normal;">@label</label> @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", new { @class = "tekisei-select2" , style = "width: 230px; vertical-align:top;" })
                        }
                    }
                </div>
            }

            @helper setSuikouLevelDdl(bool isRead, int cnt, string name, string value, SelectListItem[] selItems) {
                <div class="h24 form-inline">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            @Html.TextBox(id, value, new { @class = "form-control",@style = "width:220px;height:16px;",@size = "2",@rows = "1", @readonly = "readonly" })
                        } else {
                            @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", new { @class = "familyItems-select" })
                        }
                    }
                </div>
            }

            //職務リスト
            var TekiseiCountItems = new SelectListItem[] {
                    new SelectListItem() { Value="1:一定の仕事を根気よく続けるような仕事", Text="1:一定の仕事を根気よく続けるような仕事" },
                    new SelectListItem() { Value="2:新しい仕事を企画立案するような仕事", Text="2:新しい仕事を企画立案するような仕事" },
                    new SelectListItem() { Value="3:対人折衝により話をまとめるような仕事", Text="3:対人折衝により話をまとめるような仕事" },
                    new SelectListItem() { Value="4:数的な感覚を必要とするような仕事", Text="4:数的な感覚を必要とするような仕事" },
                    new SelectListItem() { Value="5:文章力を必要とするような仕事", Text="5:文章力を必要とするような仕事" },
                    new SelectListItem() { Value="6:多くの人と共同して処理をするような仕事", Text="6:多くの人と共同して処理をするような仕事" },
                    new SelectListItem() { Value="7:人前で話すことの多い仕事", Text="7:人前で話すことの多い仕事" },
                    new SelectListItem() { Value="8:その他", Text="8:その他" }
            };

            //遂行レベルリスト
            var SuikouLevelItems = new SelectListItem[] {
                    new SelectListItem() { Value="1:この仕事なら完全にマスターしている", Text="1:この仕事なら完全にマスターしている" },
                    new SelectListItem() { Value="2:完全ではないがほぼマスターしている", Text="2:完全ではないがほぼマスターしている" },
                    new SelectListItem() { Value="3:多少不安だが何とかこなせる", Text="3:多少不安だが何とかこなせる" },
                    new SelectListItem() { Value="4:まだ習得中である（であった）", Text="4:まだ習得中である（であった）" }
            };
	    }
        <div class="col-xs-8">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td colspan="2">
                            (1) 自分の性格、能力、経験などから考えて、向いていると思われる職務、向いていないと思われる職務を選んでください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td sstyle="display:inline;">
                            @setTekisei1(ReadOption, 1, "向いている職務1", "Aptitude_1_1_1", Model.Body.Aptitude_1_1_1, TekiseiCountItems)
                            @setTekisei1(ReadOption, 2, "向いている職務2", "Aptitude_1_1_2", Model.Body.Aptitude_1_1_2, TekiseiCountItems)
                        </td>
                        <td style="border-style:solid solid solid hidden; vertical-align:top">
                            その他を選んだ場合は内容を記入してください。
                            @Html.TextAreaFor(m => m.Body.Aptitude_1_1_Other, question2)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @setTekisei2(ReadOption, 3, "向いていない職務1", "Aptitude_1_2_1", Model.Body.Aptitude_1_2_1, TekiseiCountItems)
                            @setTekisei2(ReadOption, 4, "向いていない職務2", "Aptitude_1_2_2", Model.Body.Aptitude_1_2_2, TekiseiCountItems)
                        </td>
                        <td style="border-style:solid solid solid hidden; vertical-align:top">
                            その他を選んだ場合は内容を記入してください。
                            @Html.TextAreaFor(m => m.Body.Aptitude_1_2_Other, question3)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="col-xs-8">
                <table class="table table-bordered">
                    <colgroup>
                        <col style="width:150px;" />
                        <col style="width:150px;" />
                        <col style="width:230px;" />
                    </colgroup>
                    <thead>
                        <tr class="info">
                            <td colspan="3">
                                (2) あなたの今までの職務歴（社外も含む）の中から主なものを順に５つまでを上げ、その職務遂行に必要又は関係する資格、<br />
                                　　免許を保有していればその名称を記入し（保有していなければ記入不要）それぞれの職務の遂行レベルを選択してください。
                            </td>
                        </tr>
                        <tr class="">
                            <td style="border-style:none;" >　　職務名</td>
                            <td style="border-style:none;" >関係保有資格・免許</td>
                            <td style="border-style:none;" >遂行レベル</td>
                        </tr>

                    </thead>
                    <tbody>
                        <tr>
                            <td class="h24 form-inline" style="border-style:none; padding-right: 0px;vertical-align:top;">
                                <label class="w10" style="font-weight:normal;">1</label>
                                @Html.TextBoxFor(m => m.Body.Aptitude_2_1_Duty, Shokumuattr1)
                            </td>
                            <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                                @Html.TextBoxFor(m => m.Body.Aptitude_2_1_License, Shokumuattr1)
                            </td>
                            <td style="border-style:none; padding-right: 0px;">
                                @setSuikouLevelDdl(ReadOption, 1, "Aptitude_2_1_Level", Model.Body.Aptitude_2_1_Level, SuikouLevelItems)
                            </td>
                        </tr>

                        <tr>
                            <td class="h24 form-inline" style="border-style:none; padding-right: 0px;vertical-align:top;">
                                <label class="w10" style="font-weight:normal;">2</label>
                                @Html.TextBoxFor(m => m.Body.Aptitude_2_2_Duty, Shokumuattr1)
                            </td>
                            <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                                @Html.TextBoxFor(m => m.Body.Aptitude_2_2_License, Shokumuattr1)
                            </td>
                            <td style="border-style:none; padding-right: 0px;">
                                @setSuikouLevelDdl(ReadOption, 2, "Aptitude_2_2_Level", Model.Body.Aptitude_2_2_Level, SuikouLevelItems)
                            </td>
                        </tr>

                        <tr>
                            <td class="h24 form-inline" style="border-style:none; padding-right: 0px;vertical-align:top;">
                                <label class="w10" style="font-weight:normal;">3</label>
                                @Html.TextBoxFor(m => m.Body.Aptitude_2_3_Duty, Shokumuattr1)
                            </td>
                            <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                                @Html.TextBoxFor(m => m.Body.Aptitude_2_3_License, Shokumuattr1)
                            </td>
                            <td style="border-style:none; padding-right: 0px;">
                                @setSuikouLevelDdl(ReadOption, 3, "Aptitude_2_3_Level", Model.Body.Aptitude_2_3_Level, SuikouLevelItems)
                            </td>
                        </tr>

                        <tr>
                            <td class="h24 form-inline" style="border-style:none; padding-right: 0px;vertical-align:top;">
                                <label class="w10" style="font-weight:normal;">4</label>
                                @Html.TextBoxFor(m => m.Body.Aptitude_2_4_Duty, Shokumuattr1)
                            </td>
                            <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                                @Html.TextBoxFor(m => m.Body.Aptitude_2_4_License, Shokumuattr1)
                            </td>
                            <td style="border-style:none; padding-right: 0px;">
                                @setSuikouLevelDdl(ReadOption, 4, "Aptitude_2_4_Level", Model.Body.Aptitude_2_4_Level, SuikouLevelItems)
                            </td>
                        </tr>

                        <tr>
                            <td class="h24 form-inline" style="border-style:none; padding-right: 0px;vertical-align:top;">
                                <label class="w10" style="font-weight:normal;">5</label>
                                @Html.TextBoxFor(m => m.Body.Aptitude_2_5_Duty, Shokumuattr1)
                            </td>
                            <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                                @Html.TextBoxFor(m => m.Body.Aptitude_2_5_License, Shokumuattr1)
                            </td>
                            <td style="border-style:none; padding-right: 0px;">
                                @setSuikouLevelDdl(ReadOption, 5, "Aptitude_2_5_Level", Model.Body.Aptitude_2_5_Level, SuikouLevelItems)
                            </td>
                        </tr>

                    </tbody>
                </table>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-6">
                <table class="table table-bordered">
                    <thead>
                        <tr class="info">
                            <td>
                                (3) あなたの知識・能力・経験などに照らして、現在の職務で十分に活用されていないものがあれば記入してください。
                                　　
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                @Html.TextAreaFor(m => m.Body.Aptitude_3, question1)
                            </td>
                        </tr>
                    </tbody>
                </table>
        </div>
    </div>


    <h4 style="margin-top:20px;">4 配置換えについて</h4>
    <!-- 職務変更・配置換えについて１ -->
    <div class="row">
	    @*定義*@
        <script type="text/javascript">
            $(function () {
                $("form select.Shokumu-select1").change(function () {
                    if ( $(this).val().substr(0,2) == "ZZ") {
                        $("form input.Shokumu-other1").removeAttr("readonly");
                    } else {
                        $("form input.Shokumu-other1").attr("readonly", "readonly").val("");
                    }
                });

                $("form select.Shokumu-select2").change(function () {
                    if ( $(this).val().substr(0,2) == "ZZ") {
                        $("form input.Shokumu-other2").removeAttr("readonly");
                    } else {
                        $("form input.Shokumu-other2").attr("readonly", "readonly").val("");
                    }
                });

                var selectarea2 = $("form select.GyoumuBunrui-select");
                var selectward2 = $("form textarea.Kinmuchiattr1-other");
                $(selectarea2).change(function () {
                    if (document.getElementById("Body_TransferDepartment_2_1").value.substr(0, 1) == "7" || document.getElementById("Body_TransferDepartment_2_2").value.substr(0, 1) == "7" || document.getElementById("Body_TransferDepartment_2_3").value.substr(0, 1) == "7") {
                        $(selectward2).removeAttr("readonly");
                    } else {
                        $(selectward2).attr("readonly", "readonly").val("");
                    }
                });
            });
        </script>
	      @{
            //業務分類一覧表
            var GyoumuBunruiGroup1 = new SelectListGroup() { Name = "経営企画" };
            var GyoumuBunruiGroup2 = new SelectListGroup() { Name = "経理" };
            var GyoumuBunruiGroup3 = new SelectListGroup() { Name = "DXBX戦略" };
            var GyoumuBunruiGroup4 = new SelectListGroup() { Name = "CSR推進" };
            var GyoumuBunruiGroup5 = new SelectListGroup() { Name = "総務人事" };
            var GyoumuBunruiGroup6 = new SelectListGroup() { Name = "営業・業務" };
            var GyoumuBunruiGroup7 = new SelectListGroup() { Name = "住生活事業" };
            var GyoumuBunruiGroup8 = new SelectListGroup() { Name = "技術" };
            var GyoumuBunruiGroup9 = new SelectListGroup() { Name = "安全管理" };
            var GyoumuBunruiGroup10 = new SelectListGroup() { Name = "監査" };
            var GyoumuBunruiGroupZ = new SelectListGroup() { Name = "その他" };
            var GyoumuBunruiItems = new SelectListItem[] {
              new SelectListItem() { Value="1:企画・経営管理", Text="1 :企画・経営管理",Group = GyoumuBunruiGroup1 },
              new SelectListItem() { Value="2:経理(決算・税務)", Text="2 :経理(決算・税務)",Group = GyoumuBunruiGroup2 },
              new SelectListItem() { Value="3:財務(出納・収納)", Text="3 :財務(出納・収納)",Group = GyoumuBunruiGroup2 },
              new SelectListItem() { Value="4:工事経理", Text="4 :工事経理",Group = GyoumuBunruiGroup2 },
              new SelectListItem() { Value="5:工事契約・材料管理", Text="5 :工事契約・材料管理",Group = GyoumuBunruiGroup2 },
              new SelectListItem() { Value="6:DXBX戦略", Text="6 :DXBX戦略",Group = GyoumuBunruiGroup3 },
              new SelectListItem() { Value="7:システム開発", Text="7 :システム開発",Group = GyoumuBunruiGroup3 },
              new SelectListItem() { Value="8:広報", Text="8 :広報",Group = GyoumuBunruiGroup4 },
              new SelectListItem() { Value="9:コンプライアンス", Text="9 :コンプライアンス",Group = GyoumuBunruiGroup4 },
              new SelectListItem() { Value="10:CSR推進活動・お客様相談", Text="10:CSR推進活動・お客様相談",Group = GyoumuBunruiGroup4 },
              new SelectListItem() { Value="11:緊急事故受付管理", Text="11:緊急事故受付管理",Group = GyoumuBunruiGroup4 },
              new SelectListItem() { Value="12:総務・文書管理", Text="12:総務・文書管理",Group = GyoumuBunruiGroup5 },
              new SelectListItem() { Value="13:法務", Text="13:法務",Group = GyoumuBunruiGroup5 },
              new SelectListItem() { Value="14:人事任用", Text="14:人事任用",Group = GyoumuBunruiGroup5 },
              new SelectListItem() { Value="15:給与・社会保険・労働保険", Text="15:給与・社会保険・労働保険",Group = GyoumuBunruiGroup5 },
              new SelectListItem() { Value="16:労務・福利厚生・共済会", Text="16:労務・福利厚生・共済会",Group = GyoumuBunruiGroup5 },
              new SelectListItem() { Value="17:採用・研修", Text="17:採用・研修",Group = GyoumuBunruiGroup5 },
              new SelectListItem() { Value="18:ダイバーシティ推進", Text="18:ダイバーシティ推進",Group = GyoumuBunruiGroup5 },
              new SelectListItem() { Value="19:分譲事務管理", Text="19:分譲事務管理",Group = GyoumuBunruiGroup6 },
              new SelectListItem() { Value="20:分譲清掃", Text="20:分譲清掃",Group = GyoumuBunruiGroup6 },
              new SelectListItem() { Value="21:マンション再生", Text="21:マンション再生",Group = GyoumuBunruiGroup6 },
              new SelectListItem() { Value="22:商品開発", Text="22:商品開発",Group = GyoumuBunruiGroup6 },
              new SelectListItem() { Value="23:新規受託営業", Text="23:新規受託営業",Group = GyoumuBunruiGroup6 },
              new SelectListItem() { Value="24:大規模修繕工事等受託営業", Text="24:大規模修繕工事等受託営業",Group = GyoumuBunruiGroup6 },
              new SelectListItem() { Value="25:団地内清掃点検", Text="25:団地内清掃点検",Group = GyoumuBunruiGroup6 },
              new SelectListItem() { Value="26:団地管理・単身住宅管理・その他の受託等", Text="26:団地管理・単身住宅管理・その他の受託等",Group = GyoumuBunruiGroup6 },
              new SelectListItem() { Value="27:賃貸住宅管理", Text="27:賃貸住宅管理",Group = GyoumuBunruiGroup6 },
              new SelectListItem() { Value="28:中央監視", Text="28:中央監視",Group = GyoumuBunruiGroup6 },
              new SelectListItem() { Value="29:損害保険・生命保険・商品販売", Text="29:損害保険・生命保険・商品販売",Group = GyoumuBunruiGroup6 },
              new SelectListItem() { Value="30:新規事業開発", Text="30:新規事業開発",Group = GyoumuBunruiGroup7 },
              new SelectListItem() { Value="31:地域コミュニティ貢献事業", Text="31:地域コミュニティ貢献事業",Group = GyoumuBunruiGroup7 },
              new SelectListItem() { Value="32:ベーカリー等", Text="32:ベーカリー等",Group = GyoumuBunruiGroup7 },
              new SelectListItem() { Value="33:JSリリーフ", Text="33:JSリリーフ",Group = GyoumuBunruiGroup7 },
              new SelectListItem() { Value="34:コンビニ等", Text="34:コンビニ等",Group = GyoumuBunruiGroup7 },
              new SelectListItem() { Value="35:商業施設等", Text="35:商業施設等",Group = GyoumuBunruiGroup7 },
              new SelectListItem() { Value="36:給水施設管理・受水槽清掃等", Text="36:給水施設管理・受水槽清掃等",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="37:汚水施設管理", Text="37:汚水施設管理",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="38:雑排水管清掃等", Text="38:雑排水管清掃等",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="39:給水設備等修繕工事", Text="39:給水設備等修繕工事",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="40:保守点検", Text="40:保守点検",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="41:経常修繕工事", Text="41:経常修繕工事",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="42:空家補修工事", Text="42:空家補修工事",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="43:ライフアップ工事", Text="43:ライフアップ工事",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="44:リニューアル工事", Text="44:リニューアル工事",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="45:賃貸小修理等", Text="45:賃貸小修理等",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="46:居住環境修繕工事", Text="46:居住環境修繕工事",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="47:植栽管理", Text="47:植栽管理",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="48:ストック改修技術開発(調査及び工事)", Text="48:ストック改修技術開発(調査及び工事)",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="49:JSリフォーム", Text="49:JSリフォーム",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="50:分譲工事・特定工事・調査診断", Text="50:分譲工事・特定工事・調査診断",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="51:技術開発研究", Text="51:技術開発研究",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="52:環境分析測定", Text="52:環境分析測定",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="53:海外業務支援", Text="53:海外業務支援",Group = GyoumuBunruiGroup8 },
              new SelectListItem() { Value="54:安全管理・品質管理・産業廃棄物管理", Text="54:安全管理・品質管理・産業廃棄物管理",Group = GyoumuBunruiGroup9 },
              new SelectListItem() { Value="55:監査業務", Text="55:監査業務",Group = GyoumuBunruiGroup10 },
              new SelectListItem() { Value="ZZ:その他", Text="ZZ:その他",Group = GyoumuBunruiGroupZ }
            };
            //勤務地一覧表
            var KinmuchiGroup1 = new SelectListGroup() { Name = "本社" };
            var KinmuchiGroup2 = new SelectListGroup() { Name = "東京支社" };
            var KinmuchiGroup3 = new SelectListGroup() { Name = "関東支社" };
            var KinmuchiGroup4 = new SelectListGroup() { Name = "大阪支社" };
            var KinmuchiGroup5 = new SelectListGroup() { Name = "名古屋支社" };
            var KinmuchiGroup6 = new SelectListGroup() { Name = "福岡支社" };
            var KinmuchiGroup7 = new SelectListGroup() { Name = "出向" };
            var KinmuchiItems = new SelectListItem[] {
                    new SelectListItem() { Value="1:本社", Text="1 :本社",Group = KinmuchiGroup1 },
                    new SelectListItem() { Value="10:本社フロア", Text="10:本社フロア",Group = KinmuchiGroup1 },
                    new SelectListItem() { Value="11:スクエアJS", Text="11:スクエアJS",Group = KinmuchiGroup1 },
                    new SelectListItem() { Value="2:東京支社", Text="2 :東京支社",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="20:東京支社フロア", Text="20:東京支社フロア",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="21:東京東支店", Text="21:東京東支店",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="22:城北支店", Text="22:城北支店",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="23:東京北支店", Text="23:東京北支店",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="24:東京南支店", Text="24:東京南支店",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="25:北多摩支店", Text="25:北多摩支店",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="26:南多摩支店", Text="26:南多摩支店",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="27:横浜支店", Text="27:横浜支店",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="28:横浜南支店", Text="28:横浜南支店",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="29:神奈川西支店", Text="29:神奈川西支店",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="3:関東支社", Text="3 :関東支社",Group = KinmuchiGroup3 },
                    new SelectListItem() { Value="30:関東支社フロア", Text="30:関東支社フロア",Group = KinmuchiGroup3 },
                    new SelectListItem() { Value="31:千葉支店", Text="31:千葉支店",Group = KinmuchiGroup3 },
                    new SelectListItem() { Value="32:千葉西支店", Text="32:千葉西支店",Group = KinmuchiGroup3 },
                    new SelectListItem() { Value="33:千葉北支店", Text="33:千葉北支店",Group = KinmuchiGroup3 },
                    new SelectListItem() { Value="34:浦和支店", Text="34:浦和支店",Group = KinmuchiGroup3 },
                    new SelectListItem() { Value="35:東埼玉支店", Text="35:東埼玉支店",Group = KinmuchiGroup3 },
                    new SelectListItem() { Value="36:西埼玉支店", Text="36:西埼玉支店",Group = KinmuchiGroup3 },
                    new SelectListItem() { Value="4:大阪支社", Text="4 :大阪支社",Group = KinmuchiGroup4 },
                    new SelectListItem() { Value="40:大阪支社フロア", Text="40:大阪支社フロア",Group = KinmuchiGroup4 },
                    new SelectListItem() { Value="41:大阪中支店", Text="41:大阪中支店",Group = KinmuchiGroup4 },
                    new SelectListItem() { Value="42:大阪北支店", Text="42:大阪北支店",Group = KinmuchiGroup4 },
                    new SelectListItem() { Value="43:大阪南支店", Text="43:大阪南支店",Group = KinmuchiGroup4 },
                    new SelectListItem() { Value="44:兵庫支店", Text="44:兵庫支店",Group = KinmuchiGroup4 },
                    new SelectListItem() { Value="45:阪神支店", Text="45:阪神支店",Group = KinmuchiGroup4 },
                    new SelectListItem() { Value="46:奈良支店", Text="46:奈良支店",Group = KinmuchiGroup4 },
                    new SelectListItem() { Value="47:京都支店", Text="47:京都支店",Group = KinmuchiGroup4 },
                    new SelectListItem() { Value="5:名古屋支社", Text="5 :名古屋支社",Group = KinmuchiGroup5 },
                    new SelectListItem() { Value="50:名古屋支社フロア", Text="50:名古屋支社フロア",Group = KinmuchiGroup5 },
                    new SelectListItem() { Value="51:名北支店", Text="51:名北支店",Group = KinmuchiGroup5 },
                    new SelectListItem() { Value="6:福岡支社", Text="6 :福岡支社",Group = KinmuchiGroup6 },
                    new SelectListItem() { Value="60:福岡支社フロア", Text="60:福岡支社フロア",Group = KinmuchiGroup6 },
                    new SelectListItem() { Value="61:北九州支店", Text="61:北九州支店",Group = KinmuchiGroup6 },
                    new SelectListItem() { Value="7:出向", Text="7 :出向",Group = KinmuchiGroup7 }
            };


            var ShokumuOtherattr1 = new Dictionary<string, object>() {  { "class", " form-control Shokumu-other1 " }, { "style", "width:300px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } };
            var ShokumuOtherattr2 = new Dictionary<string, object>() {  { "class", " form-control Shokumu-other2 " }, { "style", "width:300px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } };
            var Kinmuchiattr1 = new Dictionary<string, object>() {  { "class", "form-control Kinmuchiattr1-other" }, { "size", "10" } ,{"maxlength","20"} ,{ "readonly", "readonly" } };
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:
                    //設定本人・面談者時
                    //計画・方針入力化
                    if (Model.Body.TransferDepartment_1_1.Length > 2) {
                        if ((Model.Body.TransferDepartment_1_1.Substring(0, 2) == "ZZ")) {
                            ShokumuOtherattr1.Remove("readonly");
                        }
                    }
                    if (Model.Body.TransferDepartment_1_2.Length > 2) {
                        if ((Model.Body.TransferDepartment_1_2.Substring(0, 2) == "ZZ")) {
                            ShokumuOtherattr2.Remove("readonly");
                        }
                    }

                    if (Model.Body.TransferDepartment_2_1.Length > 2) {
                        if ((Model.Body.TransferDepartment_2_1.Substring(0, 1) == "7")) {
                            Kinmuchiattr1.Remove("readonly");
                        }
                    }
                    if (Model.Body.TransferDepartment_2_2.Length > 2) {
                        if ((Model.Body.TransferDepartment_2_2.Substring(0, 1) == "7")) {
                            Kinmuchiattr1.Remove("readonly");
                        }
                    }
                    if (Model.Body.TransferDepartment_2_3.Length > 2) {
                        if ((Model.Body.TransferDepartment_2_3.Substring(0, 1) == "7")) {
                            Kinmuchiattr1.Remove("readonly");
                        }
                    }
                    break;

                default:
                    //上記以外 ReadOnly
                    break;
            }

            @helper setShokumu1(bool isRead,int cnt, string label, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            <div style="display:flex;">
                                <label class="w20" style="font-weight:normal;">@label</label> @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 250px;height:16px; vertical-align:top;" })
                            </div>
                        } else {
                            <label class="w20" style="font-weight:normal;">@label</label> @Html.DropDownList(id,selItems, "", new { @class = "Shokumu-select1" , style = "width: 250px; vertical-align:top;" })
                        }
                    }
                </div>
            }

            @helper setShokumu2(bool isRead,int cnt, string label, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            <div style="display:flex;">
                                <label class="w20" style="font-weight:normal;">@label</label> @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 250px;height:16px; vertical-align:top;" })
                            </div>
                        } else {
                            <label class="w20" style="font-weight:normal;">@label</label> @Html.DropDownList(id,selItems, "", new { @class = "Shokumu-select2" , style = "width: 250px; vertical-align:top;" })
                        }
                    }
                </div>
            }

            @helper setKinmuchi(bool isRead,int cnt, string label, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            <div style="display:flex;">
                                <label class="w100" style="font-weight:normal;">@label</label> @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 200px;height:16px; vertical-align:top;" })
                            </div>
                        } else {
                            <label class="w100" style="font-weight:normal;">@label</label> @Html.DropDownList(id,selItems, "", new { @class = "GyoumuBunrui-select" , style = "width: 200px; vertical-align:top;" })
                        }
                    }
                </div>
            }
	    }
        <div class="col-xs-8">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td colspan="2">
                            (1) 職務変更や配置換え（広域異動含む）について、上司と共有化しておきたい意見、希望などがあれば具体的に記入してください。<br>
                            　　また、自分の健康上の問題、育児や家族の介護等、配置換えにおいて配慮してほしい事由がある場合は、配慮してほしい内容を含めて<br>
                            　具体的に記入してください。<br>
                            　　なお、総括職群を選択しているが前述の事由により広域異動ができない人については、速やかに「職群転換申請書」を提出しエリア総括職群又は<br>
                            　執務職群に転換してください。<br>
                            　※選択肢の業務は例示です。選択肢にない業務については、その他を選択のうえ、直接記入してください。

                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="border-style:none ;"  colspan="2">
                            @Html.TextAreaFor(m => m.Body.TransferDepartment_1, question1)
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2" style="border-style:none ;">
                            <label class="w20" style="vertical-align: top;font-weight:normal;">※職務変更についての具体的内容については、２つ以内で希望するものを選んでください。</label>
                        </td>
                    </tr>
                    <tr>
                        <td style="border-style:none ;">
                            @setShokumu1(ReadOption, 1, "希望職務1", "TransferDepartment_1_1", Model.Body.TransferDepartment_1_1, GyoumuBunruiItems)
                        </td>
                        <td style="border-style:none ;">
                            <div class="h24 form-inline">
                                <label class="w20" style="vertical-align: top;font-weight:normal;">その他</label>
                                @Html.TextBoxFor(m => m.Body.TransferDepartment_1_1_Other, ShokumuOtherattr1)
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td style="border-style:none ;">
                            @setShokumu2(ReadOption, 2, "希望職務2", "TransferDepartment_1_2", Model.Body.TransferDepartment_1_2, GyoumuBunruiItems)
                        </td>
                        <td style="border-style:none ;">
                            <div class="h24 form-inline">
                                <label class="w20" style="vertical-align: top;font-weight:normal;">その他</label>
                                @Html.TextBoxFor(m => m.Body.TransferDepartment_1_2_Other, ShokumuOtherattr2)
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="col-xs-8">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td colspan="2">
                            (2) 配置換え希望の有無に関わらず、次回の配置換えにおいて希望する勤務地３箇所を選択してください。<br>
                            　　(支社単位でも事業所単位でも構いません)。<br>
                            　　※できるだけ第３順位まで選択すること。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="border-style:none ;">
                            @setKinmuchi(ReadOption, 1, "希望順位1", "TransferDepartment_2_1", Model.Body.TransferDepartment_2_1, KinmuchiItems)
                            @setKinmuchi(ReadOption, 2, "希望順位2", "TransferDepartment_2_2", Model.Body.TransferDepartment_2_2, KinmuchiItems)
                            @setKinmuchi(ReadOption, 3, "希望順位3", "TransferDepartment_2_3", Model.Body.TransferDepartment_2_3, KinmuchiItems)
                        </td>
                        <td style="border-style:none ;vertical-align:top">
                            <label style="font-weight:normal;">出向を選んだ場合に記入してください。</label>
                        	<div style="margin-top:5px" >
                                <label style="font-weight:normal;">出向先&nbsp;</label>@Html.TextAreaFor(m => m.Body.TransferDepartment_2_Other, Kinmuchiattr1)
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- 定年退職後の生活設計 -->
    <h4 style="margin-top:20px;">5 定年退職後の生活設計</h4>
    <div class="row">
        @*定義*@
        @{
            var FrreOldLife1 = new Dictionary<string, object>() { { "class", "form-control" }, { "rows", "8" }, { "maxlength", "1000" }, { "readonly", "readonly" } };
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:

                    //設定本人・面談者時
                    //計画・方針入力化
                    FrreOldLife1.Remove("readonly");
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }
        }
        <div class="col-xs-8">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td>
                            今後3年以内に定年退職を迎える人で、退職後の生活設計について、具体的な考えがあれば記入してください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @Html.TextAreaFor(m => m.Body.OldLifeComment1, FrreOldLife1)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <!-- 自由意見 -->
    <h4 style="margin-top:20px;">6 自由意見</h4>
    <div class="row">
	    @*定義*@
        @{
            var Frreattr1 = new Dictionary<string, object>() { { "class", "form-control" }, { "rows", "8" }, { "maxlength", "1000" }, { "readonly", "readonly" } };
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:
                    //設定本人・面談者時
                    //計画・方針入力化
                    Frreattr1.Remove("readonly");
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }
	    }
        <div class="col-xs-8">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td>
                            会社に知っておいて欲しい個人事情や特に述べたいことがあれば自由に記入してください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td >
                            @Html.TextAreaFor(m => m.Body.FreeComment, Frreattr1)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    @*隠しボタンエリア*@
    <div style="height:0px;">
        <button type="submit" name="Save" id="savebutton" value="保存" class="btn invisible">保存</button>
        <button type="submit" name="PrevDataCopy" id="prevdatacopybutton" value="前回データ取得" class="btn invisible">前回データ取得</button>
        <button type="submit" name="Save2Print" id="save2printbutton" value="保存PDF出力" class="btn invisible">保存PDF出力</button>

        <button type="submit" name="Signature" id="11" value="1,1" class="btn invisible">本人</button>
        <button type="submit" name="Signature" id="12" value="1,2" class="btn invisible">上司</button>
        <button type="submit" name="SignCancel" id="c11" value="1,1" class="btn invisible">本人</button>
        <button type="submit" name="SignCancel" id="c12" value="1,2" class="btn invisible">上司</button>
    </div>

    @Scripts.Render("~/Scripts/js/selfdec")

}
