@using EmployeeAdjustmentConnectionSystem.COM.Util.Convert
@using EmployeeAdjustmentConnectionSystem.COM.Enum
@using EmployeeAdjustmentConnectionSystem.COM.Models
@model SelfDeclareRegisterAtoCViewModels
@{
    ViewBag.Title = "自己申告書　(Ｂ－２表)";
}


@Styles.Render("~/Content/css/obj")
<!--タイトル-->
@using (Html.BeginForm("Index", "SelfDeclareRegisterB12", null, FormMethod.Post, new { @class = "form-horizontal" ,@style = "zoom:120%"})) {    @*</!--1.2倍の拡大表示-->>*@
    <h4 class="text-center">@Html.DisplayFor(m => m.Head.SheetYear) 年度　自己申告書　(Ｂ－２表)</h4>
    @Html.HiddenFor(m => m.Head.ManageNo)
    @Html.HiddenFor(m => m.Head.SheetYear)
    @Html.HiddenFor(m => m.Head.EmployeeNo)
    @Html.HiddenFor(m => m.Head.CompetencyNo)
    @Html.HiddenFor(m => m.Head.InputMode)
    @Html.HiddenFor(m => m.Head.AuthButton)
    @Html.HiddenFor(m => m.Head.CancelButton)

  <!-- ヘッダ -->
    <div class="row">
        <!--名前、社員番号等-->
        <div class="col-xs-8">
            <table class="table table-bordered ">
                <thead>
                    <tr class="h34">
                        <td class="info w80">氏名</td>
                        <td class="info w40">社員番号</td>
                        <td class="info w160">所属</td>
                        <td class="info w60">役職</td>
                        <td class="info w30">資格</td>
                        <td class="info w60">入社年月日</td>
                        <td class="info w60">当社在籍年数</td>
                        <td class="info w60">現職経験年月数</td>
                        <td class="info w60">生年月日</td>
                        <td class="info w30">年齢</td>
                    </tr>
                </thead>
                <tbody>
                    <tr class="h34">
                        <td>@Html.DisplayFor(m => m.Head.Name)</td>
                        <td>@Html.DisplayFor(m => m.Head.EmployeeNo)</td>
                        <td>@Html.DisplayFor(m => m.Head.DepartmentName)</td>
                        <td>@Html.DisplayFor(m => m.Head.PostName)</td>
                        <td>@Html.DisplayFor(m => m.Head.CompetencyName)</td>
                        <td>@Html.DisplayFor(m => m.Head.HireDateView)</td>
                        <td>@Html.DisplayFor(m => m.Head.EnrollmentMonthsView)</td>
                        <td>@Html.DisplayFor(m => m.Head.ExperienceMonthsView)</td>
                        <td>@Html.DisplayFor(m => m.Head.BirthdayView)</td>
                        <td>@Html.DisplayFor(m => m.Head.AgeView)</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <!--面談の印鑑-->
        <div class="col-xs-2">
            <table class="table table-bordered">
                <thead>
                    @*承認ボタンヘルパー*@
                    @helper setButton(SelfDeclareMode auth, SelfDeclareMode mode, string name, string value) {
                        @Html.Raw("<td class=\"info\">")
                        if (auth == mode) {
                            //2021-03-26 iwai-tamura add-str ------
                            if ((auth ==SelfDeclareMode.AtoCSelfSign) || (Model.Head.StatusType == SelfDeclareStatusType.SecondaryEdit)) {
                                var dmyId = "dmy" + value;
                                <button type="button" name="Signature" id="@dmyId" value="@value" class="btn-default btn-xs">@name</button>
                                
                            }
                            //var dmyId = "dmy" + value;
                            @*<button type="button" name="Signature" id="@dmyId" value="@value" class="btn-default btn-xs">@name</button>*@
                            //2021-03-26 iwai-tamura add-end ------

                        } else {
                            @name
                        }
                        @Html.Raw("</td>")
                    }
                    <tr class="h34">
                        @setButton(Model.Head.AuthButton, SelfDeclareMode.AtoCSelfSign, "本人", "11")
                        @*2021-03-26 iwai-tamura upd str ------*@
                        @setButton(Model.Head.AuthButton, SelfDeclareMode.AtoCBossSign, "上司", "12")
                        @*2020-12-24 sbc-tamura upd str 上司承認一時停止*@
                        @*<td class="info">上司</td>*@
                        @*@setButton(Model.Head.AuthButton, SelfDeclareMode.AtoCBossSign, "上司", "12")*@
                        @*2020-12-24 sbc-tamura upd end 上司承認一時停止*@
                        @*2021-03-26 iwai-tamura upd end ------*@
                    </tr>
                </thead>
                <tbody>
                    @*CancelButtonヘルパー*@
                    @helper setCancelButton(string name, SelfDeclareMode cancel, SelfDeclareMode mode, string value) {
                        @Html.Raw("<td>")
                        @Html.Raw(name)
                        if (cancel == mode) {
                            var dmycId = "dmyc" + value;
                            var dmycValue = "c" + value;
                            <button type="button" class="btn btn-default btn-xs" name="SignCancel" id="@dmycId" value="@dmycValue"><i class="glyphicon glyphicon-remove"></i></button>
                        }
                        @Html.Raw("</td>")
}
                    <tr class="h34">
                        @setCancelButton(Model.Head.AtoCSelfSign, Model.Head.CancelButton, SelfDeclareMode.AtoCSelfSign, "11")
                        @setCancelButton(Model.Head.AtoCBossSign, Model.Head.CancelButton, SelfDeclareMode.AtoCBossSign, "12")
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    
    @*2021-03-26 iwai-tamura upd str ------*@
    string str = "";
    switch (Model.Head.StatusType) {
        case SelfDeclareStatusType.PrimaryEdit:
        case SelfDeclareStatusType.PrimaryConfirm:
            str = String.Format("{0}年12月31日現在のデータを使用しています。", Model.Head.SheetYear);
            break;
        case SelfDeclareStatusType.SecondaryEdit:
        case SelfDeclareStatusType.SecondaryConfirm:
            str = String.Format("{0}年3月31日現在のデータを使用しています。", Model.Head.SheetYear + 1);
            break;
    }
    @*2021-03-26 iwai-tamura upd end ------*@


    <!--ボタンエリア-->
    <div class="row">
        <!--ボタン-->
        <div class="col-xs-3">
            <button type="button" name="DmySave" value="途中保存" class="btn-default pull-left" style="margin:0 5px 10px 0;" id="dmysave">途中保存</button>
            <button type="submit" name="Back" value="戻る" class="btn-default pull-left" id="backbutton" style="margin:0 5px 10px 0;margin-left:5px;">戻る</button>
            @*2021-03-26 iwai-tamura upd str ------*@
            @if ((Model.Head.InputMode == SelfDeclareMode.AtoCSelfSign) && (Model.Head.StatusType == SelfDeclareStatusType.PrimaryEdit)) {
            @*@if (Model.Head.InputMode == SelfDeclareMode.AtoCSelfSign) {*@
            @*2021-03-26 iwai-tamura upd str ------*@
                <button type="button" name="DmyPrevDataCopy" value="前回データ取得" class="btn-default pull-left" style="margin-left:5px;" id="dmyprevdatacopy">前回データ取得</button>
            }

        </div>
        <div class="col-xs-8">
            @*2021-03-26 iwai-tamura upd str ------*@
            <div>&#9632;@str<br /></div>
            @*&#9632;@Html.DisplayFor(m => m.Head.SheetYear)年12月31日現在のデータを使用しています。<br />*@
            @*2021-03-26 iwai-tamura upd end ------*@
            &#9632;入力を途中で中断する際は途中保存ボタンで保存して下さい。登録・承認については該当するボタンを押下して下さい。<br />
            &#9632;戻るボタンを押下するとTOPへ戻ります。<br />
            @if (Model.Head.InputMode == SelfDeclareMode.AtoCSelfSign) {
                @*<div>&#9632;前回データ取得ボタンを押下すると前回の自己申告書データで上書きします。(存在しない場合は何もしません。)<br /></div>*@
            }
            
        </div>
    </div>

    <h4 style="margin-top:20px;">1 本人の状況</h4>
    <!-- 住所 -->
    <div class="row">
        @*定義*@
        @{
            //入力モード
            var PostNo1 = new Dictionary<string, object>() { { "class", " form-control " }, { "style", "width:30px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "3" }, { "readonly", "readonly" } };
            var PostNo2 = new Dictionary<string, object>() { { "class", " form-control " }, { "style", "width:45px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "4" }, { "readonly", "readonly" } };
            var attr1 = new Dictionary<string, object>() { { "class", "form-control" }, { "rows", "6" }, { "maxlength", "500" }, { "readonly", "readonly" } };
            var ReadOption = true;
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:

                    //設定本人・面談者時
                    //計画・方針入力化
                    PostNo1.Remove("readonly");
                    PostNo2.Remove("readonly");
                    attr1.Remove("readonly");
                    ReadOption = false;
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }
            
            //住所形態リスト
            var addressItems = new SelectListItem[] {
                    new SelectListItem() { Value="1:持家(UR)", Text="1:持家(UR)" },
                    new SelectListItem() { Value="2:持家(その他)", Text="2:持家(その他)" },
                    new SelectListItem() { Value="3:賃貸(UR)", Text="3:賃貸(UR)" },
                    new SelectListItem() { Value="4:賃貸(借上社宅)", Text="4:賃貸(借上社宅)" },
                    new SelectListItem() { Value="5:賃貸(その他)", Text="5:賃貸(その他)" },
                    new SelectListItem() { Value="6:親の家", Text="6:親の家" }
            };

            @helper setDdl2(bool isRead, int cnt, string name, string value, SelectListItem[] selItems) {
                <div class="form-group-custom">
                    @{
                            var id = string.Format("Head.{0}", name);
                            if (isRead) {
                                @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly" })
                            } else {
                                @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", "")
                            }
                    }
                </div>
            }
        }
        <div class="col-xs-4">
                <table class="table table-bordered">
                    <thead>
                        <tr class="info">
                            <td>
                                現住所
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <div class="h24 form-inline">
                                    〒
                                    @Html.TextBoxFor(m => m.Head.PostalCode_1, PostNo1)
                                    -
                                    @Html.TextBoxFor(m => m.Head.PostalCode_2, PostNo2)
                                </div>
                                @Html.TextAreaFor(m => m.Head.Address, attr1)
                            </td>
                        </tr>
                    </tbody>
                </table>
        </div>
        <div class="col-xs-2">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td>
                            住所形態
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @setDdl2(ReadOption, 1, "AddressType", Model.Head.AddressType, addressItems)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>


    <!-- 家族の状況 -->
    <div class="row">
        @*定義*@
        <script type="text/javascript">
            $(function () {
                var selectarea = $("form select.familyItems-select");
                var selectward = $("form input.family-other1");
                $(selectarea).change(function () {
                    switch ($(this).attr("id")) {
                        case "Head_Relationship_1":
                            selectward = $("form input.family-other1");
                            break;
                        case "Head_Relationship_2":
                            selectward = $("form input.family-other2");
                            break;
                        case "Head_Relationship_3":
                            selectward = $("form input.family-other3");
                            break;
                        case "Head_Relationship_4":
                            selectward = $("form input.family-other4");
                            break;
                        case "Head_Relationship_5":
                            selectward = $("form input.family-other5");
                            break;
                        case "Head_Relationship_6":
                            selectward = $("form input.family-other6");
                            break;
                        case "Head_Relationship_7":
                            selectward = $("form input.family-other7");
                            break;
                        case "Head_Relationship_8":
                            selectward = $("form input.family-other8");
                            break;
                        default:
                            selectward = "";
                    }
                    if ($(this).val().substr(0, 2) == "ZZ") {
                        $(selectward).removeAttr("readonly");
                    } else {
                        $(selectward).attr("readonly", "readonly").val("");
                    }
                });
            });
        </script>

        @{
            //入力モード
            //家族年齢
            var attrFamilyAge = new Dictionary<string, object>() { { "class", " form-control" }, { "type", "text" },{"onKeyup","this.value=this.value.replace(/[^0-9]+/i,'')"}, { "style", "width:30px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","3"} ,{ "readonly", "readonly" } };
            //家族職業・学年
            var attrFamilyContents = new Dictionary<string, object>() { { "class", " form-control" }, { "style", "width:150px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } };
            //家族続柄その他
            var familyOtherattr1 = new Dictionary<string, object>() { { "class", " form-control family-other1 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr2 = new Dictionary<string, object>() { { "class", " form-control family-other2 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr3 = new Dictionary<string, object>() { { "class", " form-control family-other3 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr4 = new Dictionary<string, object>() { { "class", " form-control family-other4 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr5 = new Dictionary<string, object>() { { "class", " form-control family-other5 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr6 = new Dictionary<string, object>() { { "class", " form-control family-other6 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr7 = new Dictionary<string, object>() { { "class", " form-control family-other7 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var familyOtherattr8 = new Dictionary<string, object>() { { "class", " form-control family-other8 " }, { "style", "width:100px;height:16px;" }, { "size", "2" }, { "rows", "1" }, { "maxlength", "20" }, { "readonly", "readonly" } };

            //var attrFamilyTypeOther = new Dictionary<int,Dictionary<string, object>>(){
            //    {0,new Dictionary<string, object>() {  { "class", " form-control family-other1 " }, { "style", "width:100px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } }},
            //    {1,new Dictionary<string, object>() {  { "class", " form-control family-other2 " }, { "style", "width:100px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } }},
            //    {2,new Dictionary<string, object>() {  { "class", " form-control family-other3 " }, { "style", "width:100px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } }},
            //    {3,new Dictionary<string, object>() {  { "class", " form-control family-other4 " }, { "style", "width:100px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } }},
            //    {4,new Dictionary<string, object>() {  { "class", " form-control family-other5 " }, { "style", "width:100px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } }},
            //    {5,new Dictionary<string, object>() {  { "class", " form-control family-other6 " }, { "style", "width:100px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } }},
            //    {6,new Dictionary<string, object>() {  { "class", " form-control family-other7 " }, { "style", "width:100px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } }},
            //    {7,new Dictionary<string, object>() {  { "class", " form-control family-other8 " }, { "style", "width:100px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } }}
            //};

            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:

                    //設定本人・面談者時
                    //計画・方針入力化
                    //attr1.Remove("readonly");
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:

                    //本人
                    if (Model.Head.Relationship_1.Length > 2) {
                        if (Model.Head.Relationship_1.Substring(0, 2) == "ZZ") {
                            familyOtherattr1.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_2.Length > 2) {
                        if (Model.Head.Relationship_2.Substring(0, 2) == "ZZ") {
                            familyOtherattr2.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_3.Length > 2) {
                        if (Model.Head.Relationship_3.Substring(0, 2) == "ZZ") {
                            familyOtherattr3.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_4.Length > 2) {
                        if (Model.Head.Relationship_4.Substring(0, 2) == "ZZ") {
                            familyOtherattr4.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_5.Length > 2) {
                        if (Model.Head.Relationship_5.Substring(0, 2) == "ZZ") {
                            familyOtherattr5.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_6.Length > 2) {
                        if (Model.Head.Relationship_6.Substring(0, 2) == "ZZ") {
                            familyOtherattr6.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_7.Length > 2) {
                        if (Model.Head.Relationship_7.Substring(0, 2) == "ZZ") {
                            familyOtherattr7.Remove("readonly");
                        }
                    }
                    if (Model.Head.Relationship_8.Length > 2) {
                        if (Model.Head.Relationship_8.Substring(0, 2) == "ZZ") {
                            familyOtherattr8.Remove("readonly");
                        }
                    }
                    attrFamilyAge.Remove("readonly");
                    attrFamilyContents.Remove("readonly");
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }

            //続柄リスト
            var familyItems = new SelectListItem[] {
                    new SelectListItem() { Value="11:配偶者(夫)", Text="11:配偶者(夫)" },
                    new SelectListItem() { Value="12:配偶者(妻)", Text="12:配偶者(妻)" },
                    new SelectListItem() { Value="21:長男", Text="21:長男" },
                    new SelectListItem() { Value="22:次男", Text="22:次男" },
                    new SelectListItem() { Value="23:三男", Text="23:三男" },
                    new SelectListItem() { Value="24:四男", Text="24:四男" },
                    new SelectListItem() { Value="25:五男", Text="25:五男" },
                    new SelectListItem() { Value="26:六男", Text="26:六男" },
                    new SelectListItem() { Value="27:七男", Text="27:七男" },
                    new SelectListItem() { Value="28:八男", Text="28:八男" },
                    new SelectListItem() { Value="29:九男", Text="29:九男" },
                    new SelectListItem() { Value="31:長女", Text="31:長女" },
                    new SelectListItem() { Value="32:二女", Text="32:二女" },
                    new SelectListItem() { Value="33:三女", Text="33:三女" },
                    new SelectListItem() { Value="34:四女", Text="34:四女" },
                    new SelectListItem() { Value="35:五女", Text="35:五女" },
                    new SelectListItem() { Value="36:六女", Text="36:六女" },
                    new SelectListItem() { Value="37:七女", Text="37:七女" },
                    new SelectListItem() { Value="38:八女", Text="38:八女" },
                    new SelectListItem() { Value="39:九女", Text="39:九女" },
                    new SelectListItem() { Value="41:父", Text="41:父" },
                    new SelectListItem() { Value="42:母", Text="42:母" },
                    new SelectListItem() { Value="43:義父", Text="43:義父" },
                    new SelectListItem() { Value="44:義母", Text="44:義母" },
                    new SelectListItem() { Value="45:祖父", Text="45:祖父" },
                    new SelectListItem() { Value="46:祖母", Text="46:祖母" },
                    new SelectListItem() { Value="47:義祖父", Text="47:義祖父" },
                    new SelectListItem() { Value="48:義祖母", Text="48:義祖母" },
                    new SelectListItem() { Value="60:孫", Text="60:孫" },
                    new SelectListItem() { Value="71:兄", Text="71:兄" },
                    new SelectListItem() { Value="72:姉", Text="72:姉" },
                    new SelectListItem() { Value="73:弟", Text="73:弟" },
                    new SelectListItem() { Value="74:妹", Text="74:妹" },
                    new SelectListItem() { Value="75:義兄", Text="75:義兄" },
                    new SelectListItem() { Value="76:義姉", Text="76:義姉" },
                    new SelectListItem() { Value="77:義弟", Text="77:義弟" },
                    new SelectListItem() { Value="78:義妹", Text="78:義妹" },
                    new SelectListItem() { Value="81:叔父", Text="81:叔父" },
                    new SelectListItem() { Value="82:叔母", Text="82:叔母" },
                    new SelectListItem() { Value="83:甥", Text="83:甥" },
                    new SelectListItem() { Value="84:姪", Text="84:姪" },
                    new SelectListItem() { Value="ZZ:その他", Text="ZZ:その他" }
            };

            //同居人数リスト
            var familyCountItems = new SelectListItem[] {
                    new SelectListItem() { Value="0", Text="0" },
                    new SelectListItem() { Value="1", Text="1" },
                    new SelectListItem() { Value="2", Text="2" },
                    new SelectListItem() { Value="3", Text="3" },
                    new SelectListItem() { Value="4", Text="4" },
                    new SelectListItem() { Value="5", Text="5" },
                    new SelectListItem() { Value="6", Text="6" },
                    new SelectListItem() { Value="7", Text="7" },
                    new SelectListItem() { Value="8", Text="8" }
            };
            @helper setFamilyDdl2(bool isRead, int cnt, string name, string value, SelectListItem[] selItems) {
                <div class="h24 form-inline">
                    @{
                        var id = string.Format("Head.{0}", name);
                        if (isRead) {
                            <label class="w10" style="font-weight:normal;">@cnt</label> @Html.TextBox(id, value, new { @class = "form-control",@style = "width:90px;height:16px;",@size = "2",@rows = "1", @readonly = "readonly" })
                        } else {
                            <label class="w10" style="font-weight:normal;">@cnt</label> @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", new { @class = "familyItems-select" })
                        }
                    }
                </div>
            }
            //CheckBox出力ヘルパー
            @helper setCheck(bool isRead,int cnt, string name, string value) {
              if(isRead) {
                @Html.Hidden(string.Format ("Head.{0}_{1}",name,cnt), value)
                @Html.Raw(string.Format("<span style=\"font-size: 17px;\">{0}</span>", (value == "1" ? "■" : "□")))
              } else {
                @Html.CheckBox(string.Format("Head.{0}_{1}", name, cnt), (value == "1" ? true : false), new { tabindex = 1, @style = "margin-top:0px;" })
              }
            }
        }

        <div class="col-xs-5">
            <table class="table table-bordered"  vertical-align="top">
                <colgroup>
                  <col style="width:100px;" />
                  <col style="width:120px;" />
                  <col style="width:30px;" />
                  <col style="width:130px;" />
                  <col style="width:30px;" />
                  <col style="width:30px;" />
                </colgroup>
                <thead>
                    <tr class="info">
                        <td colspan="6">
                            家族の状況(本人を除く)
                        </td>
                    </tr>
                    <tr class="">
                        <td style="border-style:none;" colspan="2">続柄</td>
                        <td style="border-style:none;" >年齢</td>
                        <td style="border-style:none;" >職業・学年</td>
                        <td style="border-style:none;" >同居</td>
                        <td style="border-style:none;" >扶養</td>
                    </tr>
                </thead>
                <tbody>
                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 1, "Relationship_1", Model.Head.Relationship_1, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_1, familyOtherattr1)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_1, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_1, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 1, "FamilyLodger", Model.Head.FamilyLodger_1)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 1, "FamilyDependent", Model.Head.FamilyDependent_1)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 2, "Relationship_2", Model.Head.Relationship_2, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_2, familyOtherattr2)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_2, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_2, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 2, "FamilyLodger", Model.Head.FamilyLodger_2)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 2, "FamilyDependent", Model.Head.FamilyDependent_2)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 3, "Relationship_3", Model.Head.Relationship_3, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_3, familyOtherattr3)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_3, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_3, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 3, "FamilyLodger", Model.Head.FamilyLodger_3)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 3, "FamilyDependent", Model.Head.FamilyDependent_3)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 4, "Relationship_4", Model.Head.Relationship_4, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_4, familyOtherattr4)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_4, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_4, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 4, "FamilyLodger", Model.Head.FamilyLodger_4)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 4, "FamilyDependent", Model.Head.FamilyDependent_4)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 5, "Relationship_5", Model.Head.Relationship_5, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_5, familyOtherattr5)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_5, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_5, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 5, "FamilyLodger", Model.Head.FamilyLodger_5)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 5, "FamilyDependent", Model.Head.FamilyDependent_5)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 6, "Relationship_6", Model.Head.Relationship_6, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_6, familyOtherattr6)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_6, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_6, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 6, "FamilyLodger", Model.Head.FamilyLodger_6)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 6, "FamilyDependent", Model.Head.FamilyDependent_6)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 7, "Relationship_7", Model.Head.Relationship_7, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_7, familyOtherattr7)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_7, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_7, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 7, "FamilyLodger", Model.Head.FamilyLodger_7)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 7, "FamilyDependent", Model.Head.FamilyDependent_7)
                        </td>
                    </tr>

                    <tr style="border-style:none;">
                        <td style="border-style:none; padding-right: 0px;">
                            @setFamilyDdl2(ReadOption, 8, "Relationship_8", Model.Head.Relationship_8, familyItems)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;">
                            <div class="h24 form-inline"><label class="w20" style="vertical-align: top;font-weight:normal;">その他</label> @Html.TextBoxFor(m => m.Head.RelationshipContentOther_8, familyOtherattr8)</div>
                        </td>
                        <td style="border-style:none ; vertical-align:top">
                            @Html.TextBoxFor(m => m.Head.FamilyAge_8, attrFamilyAge)
                        </td>
                        <td style="border-style:none; padding-right: 0px;vertical-align:top;">
                            @Html.TextBoxFor(m => m.Head.FamilyJob_8, attrFamilyContents)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 8, "FamilyLodger", Model.Head.FamilyLodger_8)
                        </td>
                        <td style="border-style:none ; padding-right: 0px;text-align:center;vertical-align:top;">
                            @setCheck(ReadOption, 8, "FamilyDependent", Model.Head.FamilyDependent_8)
                        </td>
                    </tr>

                </tbody>
            </table>
        </div>
    </div>

    <!-- 健康状態 -->
    <div class="row">
        @*定義*@
        <script type="text/javascript">
            $(function () {
                var selectarea = $("form select.prefecture");
                var selectward = $("form textarea.select-other");
                //$(selectward).attr("readonly", "readonly");
                $(selectarea).change(function () {
                    var area = $(this).val().substr(0,1);
                    if (area == "3") {
                        $(selectward).removeAttr("readonly");
                    } else {
                        $(selectward).attr("readonly", "readonly").val("");
                    }
                });
            });
        </script>

        @{
            //入力モード
            var Healthattr1 = new Dictionary<string, object>() { { "class", "form-control select-other" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:

                    //設定本人・面談者時
                    //計画・方針入力化
                    if (Model.Head.Health.Length > 2) {
                        if (Model.Head.Health.Substring(0, 1) == "3") {
                            Healthattr1.Remove("readonly");
                        }
                    }
                    
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }

            //健康状態リスト
            var HealthItems = new SelectListItem[] {
                    new SelectListItem() { Value="1:良好", Text="1:良好" },
                    new SelectListItem() { Value="2:普通", Text="2:普通" },
                    new SelectListItem() { Value="3:不順", Text="3:不順"}
            };

            @helper setHealthDdl1(bool isRead, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Head.{0}", name);
                        if (isRead) {
                            @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly" })
                        } else {
                            @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", new { @class = "prefecture" , style = "width: 60px; vertical-align:top;" })
                        }
                    }
                </div>
            }
        }

        <div class="col-xs-5">
            <table class="table table-bordered" vertical-align="top">
                <thead>
                    <tr class="info">
                        <td colspan="2">
                            健康状態（心身両面）
                        </td>
                    </tr>
                    <tr class="info">
                        <td>
                            状態
                        </td>
                        <td >
                            不順の状態
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="vertical-align:top">
                            @setHealthDdl1(ReadOption,"Health", Model.Head.Health, HealthItems)
                        </td>
                        <td>
                            @Html.TextAreaFor(m => m.Head.UnHealthContent, Healthattr1)
                        </td>
                </tbody>
            </table>
        </div>
    </div>

    <h4 style="margin-top:20px;">2 担当職務について</h4>

    <!-- 担当職務について -->
    <div class="row">
	    @*定義*@
	    @{
	        //入力モード
            //2021-03-26 iwai-tamura add-str ------
            bool PrimaryEdit = true;
            bool SecondaryEdit = true;
            //2021-03-26 iwai-tamura add-end ------
            
	        var question1 = new Dictionary<string, object>() { { "class", "form-control" }, { "rows", "4" }, { "maxlength", "500" }, { "readonly", "readonly" } };
	        switch (Model.Head.InputMode) {
	            case SelfDeclareMode.AtoCSelfSign:
	                //設定本人・面談者時
	                //計画・方針入力化
                    //2021-03-26 iwai-tamura add-str ------
                    switch (Model.Head.StatusType) {
                        case SelfDeclareStatusType.PrimaryEdit:
                        case SelfDeclareStatusType.PrimaryConfirm:
                            question1.Remove("readonly");
                            PrimaryEdit = false;
                            break;
                        case SelfDeclareStatusType.SecondaryEdit:
                        case SelfDeclareStatusType.SecondaryConfirm:
                            break;
                    }
                    //question1.Remove("readonly");
                    //2021-03-26 iwai-tamura add-end ------
	                break;
	            default:
	                //上記以外 ReadOnly
	                break;
	        }

            //2020-12-24 iwai-tamura upd-str ------
            var question1_r = new Dictionary<string, object>() { { "class", "form-control" }, { "rows", "4" }, { "maxlength", "500" }, { "readonly", "readonly" } };
            //2020-12-24 iwai-tamura upd-end ------
            
            //2021-03-26 iwai-tamura add-str ------
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:
                    //設定本人・面談者時
                    //計画・方針入力化
                    switch (Model.Head.StatusType) {
                        case SelfDeclareStatusType.PrimaryEdit:
                        case SelfDeclareStatusType.PrimaryConfirm:
                            break;
                        case SelfDeclareStatusType.SecondaryEdit:
                        case SelfDeclareStatusType.SecondaryConfirm:
                            SecondaryEdit = false;
                            question1_r.Remove("readonly");
                            break;
                    }
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }
            //2021-03-26 iwai-tamura add-end ------


                        
	    }
    </div>

    <div class="row">
        <div class="col-xs-6">
                <table class="table table-bordered">
                    <thead>
                        <tr class="info">
                            <td>
                                (1) この１年間に担当した仕事に関する感想、プラスになったこと、身につけたこと、苦心したこと、改善すべき点等について<br>
                                　　具体的に記入してください。
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                @Html.TextAreaFor(m => m.Body.ChargeDuty_1, question1_r)
                            </td>
                        </tr>
                    </tbody>
                </table>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-6">
                <table class="table table-bordered">
                    <thead>
                        <tr class="info">
                            <td>
                                (2) 今後1年間どのような抱負(重点目標)を持って仕事を行っていくか、あるいは、実践していこうと思っている業務の効率化、<br>
                                　　職場の活性化のための改善提案があれば記入してください。
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                @Html.TextAreaFor(m => m.Body.ChargeDuty_2, question1_r)
                            </td>
                        </tr>
                    </tbody>
                </table>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-6">
                <table class="table table-bordered">
                    <thead>
                        <tr class="info">
                            <td>
                                (3) 前項実現、達成のために上司に考慮してほしいことがあれば記入してください。
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                @Html.TextAreaFor(m => m.Body.ChargeDuty_3, question1_r)
                            </td>
                        </tr>
                    </tbody>
                </table>
        </div>
    </div>

    <!-- 適性・能力開発について -->
    <h4 style="margin-top:20px;">3 適性・能力開発について</h4>
    <div class="row">
	    @*定義*@
        <script type="text/javascript">
            $(function () {
                var selectarea = $("form select.tekisei-select1");
                var selectward = $("form textarea.tekisei-other1");
                //$("form textarea.tekisei-other1").attr("readonly", "readonly");
                //$("form textarea.tekisei-other2").attr("readonly", "readonly");
                $(selectarea).change(function () {
                    if (document.getElementById("Body_AptitudeDevelop_1_1_1").value.substr(0, 1) == "8" || document.getElementById("Body_AptitudeDevelop_1_1_2").value.substr(0, 1) == "8") {
                        $("form textarea.tekisei-other1").removeAttr("readonly");
                    } else {
                        $("form textarea.tekisei-other1").attr("readonly", "readonly").val("");
                    }
                });
                $("form select.tekisei-select2").change(function () {
                    if (document.getElementById("Body_AptitudeDevelop_1_2_1").value.substr(0, 1) == "8" || document.getElementById("Body_AptitudeDevelop_1_2_2").value.substr(0, 1) == "8") {
                        $("form textarea.tekisei-other2").removeAttr("readonly");
                    } else {
                        $("form textarea.tekisei-other2").attr("readonly", "readonly").val("");
                    }
                });
            });
        </script>
	    @{
	        //入力モード
            var question2 = new Dictionary<string, object>() { { "class", "form-control tekisei-other1" }, { "rows", "3" }, { "maxlength", "500" }, { "readonly", "readonly" } };
            var question3 = new Dictionary<string, object>() { { "class", "form-control tekisei-other2" }, { "rows", "3" }, { "maxlength", "500" }, { "readonly", "readonly" } };
	        switch (Model.Head.InputMode) {
	            case SelfDeclareMode.AtoCSelfSign:
	                //設定本人・面談者時
	                //計画・方針入力化
                    //2021-03-26 iwai-tamura add-str ------
                    switch (Model.Head.StatusType) {
                        case SelfDeclareStatusType.PrimaryEdit:
                        case SelfDeclareStatusType.PrimaryConfirm:
                            if ((Model.Body.AptitudeDevelop_1_1_1.Substring(0, 1) == "8") || (Model.Body.AptitudeDevelop_1_1_2.Substring(0, 1) == "8")) {
                                question2.Remove("readonly");
                            }
                            if ((Model.Body.AptitudeDevelop_1_2_1.Substring(0, 1) == "8") || (Model.Body.AptitudeDevelop_1_2_2.Substring(0, 1) == "8")) {
                                question3.Remove("readonly");
                            }
                            break;
                        case SelfDeclareStatusType.SecondaryEdit:
                        case SelfDeclareStatusType.SecondaryConfirm:
                            break;
                    }
                    //if ((Model.Body.AptitudeDevelop_1_1_1.Substring(0, 1) == "8") || (Model.Body.AptitudeDevelop_1_1_2.Substring(0, 1) == "8")) {
                    //    question2.Remove("readonly");
                    //}
                    //if ((Model.Body.AptitudeDevelop_1_2_1.Substring(0, 1) == "8") || (Model.Body.AptitudeDevelop_1_2_2.Substring(0, 1) == "8")) {
                    //    question3.Remove("readonly");
                    //}
                    //2021-03-26 iwai-tamura add-end ------


                    break;
	            default:
	                //上記以外 ReadOnly
	                break;
	        }

            var Tekiseiattr1 = new Dictionary<string, object>() { { "class", "form-control select-other1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            var Tekiseiattr2 = new Dictionary<string, object>() { { "class", "form-control select-other1" }, { "maxlength", "20" }, { "readonly", "readonly" } };
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:

                    //設定本人・面談者時
                    //計画・方針入力化
                    //2021-03-26 iwai-tamura add-str ------
                    switch (Model.Head.StatusType) {
                        case SelfDeclareStatusType.PrimaryEdit:
                        case SelfDeclareStatusType.PrimaryConfirm:
                            Tekiseiattr1.Remove("readonly");
                            Tekiseiattr2.Remove("readonly");
                            break;
                        case SelfDeclareStatusType.SecondaryEdit:
                        case SelfDeclareStatusType.SecondaryConfirm:
                            break;
                    }
                    //Tekiseiattr1.Remove("readonly");
                    //Tekiseiattr2.Remove("readonly");
                    //2021-03-26 iwai-tamura add-end ------
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }

            @helper setTekisei1(bool isRead, string label, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            <div style="display:flex;">
                                <label class="w100" style="font-weight:normal;">@label</label> @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 250px;height:16px; vertical-align:top;" })
                            </div>
                        } else {
                            <label class="w100" style="font-weight:normal;">@label</label> @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", new { @class = "tekisei-select1" , style = "width: 250px; vertical-align:top;" })
                        }
                    }
                </div>
            }

            @helper setTekisei2(bool isRead, string label, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            <div style="display:flex;">
                                <label class="w100" style="font-weight:normal;">@label</label> @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 250px;height:16px; vertical-align:top;" })
                            </div>
                        } else {
                            <label class="w100" style="font-weight:normal;">@label</label> @Html.DropDownList(id, new SelectList((IEnumerable<SelectListItem>)selItems, "Value", "Text", value), "", new { @class = "tekisei-select2" , style = "width: 250px; vertical-align:top;" })
                        }
                    }
                </div>
            }

            //職務リスト
            var TekiseiCountItems = new SelectListItem[] {
                    new SelectListItem() { Value="1:一定の仕事を根気よく続けるような仕事", Text="1:一定の仕事を根気よく続けるような仕事" },
                    new SelectListItem() { Value="2:新しい仕事を企画立案するような仕事", Text="2:新しい仕事を企画立案するような仕事" },
                    new SelectListItem() { Value="3:対人折衝により話をまとめるような仕事", Text="3:対人折衝により話をまとめるような仕事" },
                    new SelectListItem() { Value="4:数的な感覚を必要とするような仕事", Text="4:数的な感覚を必要とするような仕事" },
                    new SelectListItem() { Value="5:文章力を必要とするような仕事", Text="5:文章力を必要とするような仕事" },
                    new SelectListItem() { Value="6:多くの人と共同して処理をするような仕事", Text="6:多くの人と共同して処理をするような仕事" },
                    new SelectListItem() { Value="7:人前で話すことの多い仕事", Text="7:人前で話すことの多い仕事" },
                    new SelectListItem() { Value="8:その他", Text="8:その他" }
            };

	    }
        <div class="col-xs-7">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td colspan="2">
                            (1) 自分の性格、能力、経験などから考えて、向いていると思われる職務、向いていないと思われる職務を2つ以内で選択してください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @*2021-03-26 iwai-tamura upd str ------*@
                            @setTekisei1(PrimaryEdit, "向いている職務1", "AptitudeDevelop_1_1_1", Model.Body.AptitudeDevelop_1_1_1, TekiseiCountItems)
                            @setTekisei1(PrimaryEdit, "向いている職務2", "AptitudeDevelop_1_1_2", Model.Body.AptitudeDevelop_1_1_2, TekiseiCountItems)
                            @*@setTekisei1(ReadOption, "向いている職務1", "AptitudeDevelop_1_1_1", Model.Body.AptitudeDevelop_1_1_1, TekiseiCountItems)*@
                            @*@setTekisei1(ReadOption, "向いている職務2", "AptitudeDevelop_1_1_2", Model.Body.AptitudeDevelop_1_1_2, TekiseiCountItems)*@
                            @*2021-03-26 iwai-tamura upd end ------*@
                        </td>
                        <td style="border-style:solid solid solid hidden; vertical-align:top">
                        	その他を選んだ場合は内容を記入してください。
                            @Html.TextAreaFor(m => m.Body.AptitudeDevelop_1_1_Other, question2)
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @*2021-03-26 iwai-tamura upd str ------*@
                            @setTekisei2(PrimaryEdit, "向いていない職務1", "AptitudeDevelop_1_2_1", Model.Body.AptitudeDevelop_1_2_1, TekiseiCountItems)
                            @setTekisei2(PrimaryEdit, "向いていない職務2", "AptitudeDevelop_1_2_2", Model.Body.AptitudeDevelop_1_2_2, TekiseiCountItems)
                            @*@setTekisei2(ReadOption, "向いていない職務1", "AptitudeDevelop_1_2_1", Model.Body.AptitudeDevelop_1_2_1, TekiseiCountItems)*@
                            @*@setTekisei2(ReadOption, "向いていない職務2", "AptitudeDevelop_1_2_2", Model.Body.AptitudeDevelop_1_2_2, TekiseiCountItems)*@
                            @*2021-03-26 iwai-tamura upd end ------*@
                        </td>
                        <td style="border-style:solid solid solid hidden; vertical-align:top">
                        	その他を選んだ場合は内容を記入してください。
                            @Html.TextAreaFor(m => m.Body.AptitudeDevelop_1_2_Other, question3)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="col-xs-6">
                <table class="table table-bordered">
                    <thead>
                        <tr class="info">
                            <td>
                                (2) あなたの知識・能力・経験などに照らして、現在の職務で十分に活用されていないものがあれば記入してください。
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                @Html.TextAreaFor(m => m.Body.AptitudeDevelop_2_Content, question1)
                            </td>
                        </tr>
                    </tbody>
                </table>
        </div>
    </div>


    <h4 style="margin-top:20px;">4 職務変更・配置換えについて</h4>
    <!-- 職務変更・配置換えについて１ -->
    <div class="row">
	    @*定義*@
        <script type="text/javascript">
            $(function () {
                $("form select.Shokumu-select1").change(function () {
                    if ($(this).val().substr(0, 2) == "ZZ") {
                        $("form input.Shokumu-other1").removeAttr("readonly");
                    } else {
                        $("form input.Shokumu-other1").attr("readonly", "readonly").val("");
                    }
                });

                $("form select.Shokumu-select2").change(function () {
                    if ($(this).val().substr(0, 2) == "ZZ") {
                        $("form input.Shokumu-other2").removeAttr("readonly");
                    } else {
                        $("form input.Shokumu-other2").attr("readonly", "readonly").val("");
                    }
                });

                var selectarea2 = $("form select.GyoumuBunrui-select");
                var selectward2 = $("form textarea.Kinmuchiattr1-other");
                //var txtA = document.getElementById("TransferDutyDepartment_2_1").value;
                $(selectarea2).change(function () {
                    //2021-01-15 iwai-tamura upd-str ---
                    if (document.getElementById("Body_TransferDutyDepartment_2_1").value.substr(0, 1) == "7" || document.getElementById("Body_TransferDutyDepartment_2_2").value.substr(0, 1) == "7" || document.getElementById("Body_TransferDutyDepartment_2_3").value.substr(0, 1) == "7") {
                    //if (document.getElementById("Body_TransferDutyDepartment_2_1").value.substr(0, 2) == "32" || document.getElementById("Body_TransferDutyDepartment_2_2").value.substr(0, 2) == "32" || document.getElementById("Body_TransferDutyDepartment_2_3").value.substr(0, 2) == "32") {
                    //2021-01-15 iwai-tamura upd-str ---
                        $(selectward2).removeAttr("readonly");
                    } else {
                        $(selectward2).attr("readonly", "readonly").val("");
                    }
                });
            });
        </script>
	      @{
            //業務分類一覧表
            var GyoumuBunruiGroup1 = new SelectListGroup() { Name = "企画" };
            var GyoumuBunruiGroup2 = new SelectListGroup() { Name = "総務" };
            var GyoumuBunruiGroup3 = new SelectListGroup() { Name = "安全管理工事契約" };
            var GyoumuBunruiGroup4 = new SelectListGroup() { Name = "人事研修" };
            var GyoumuBunruiGroup5 = new SelectListGroup() { Name = "労務厚生" };
            var GyoumuBunruiGroup6 = new SelectListGroup() { Name = "経理" };
            var GyoumuBunruiGroup7 = new SelectListGroup() { Name = "CS" };
            var GyoumuBunruiGroup8 = new SelectListGroup() { Name = "監査" };
            var GyoumuBunruiGroup9 = new SelectListGroup() { Name = "生活サービス施設" };
            var GyoumuBunruiGroup10 = new SelectListGroup() { Name = "生活環境サポート" };
            var GyoumuBunruiGroup11 = new SelectListGroup() { Name = "生活環境サポート 24時間緊急サービス" };
            var GyoumuBunruiGroup12 = new SelectListGroup() { Name = "ライフライン管理" };
            var GyoumuBunruiGroup13 = new SelectListGroup() { Name = "予防保全緊急修繕" };
            var GyoumuBunruiGroup14 = new SelectListGroup() { Name = "室内リフォーム" };
            var GyoumuBunruiGroup15 = new SelectListGroup() { Name = "屋外環境整備" };
            var GyoumuBunruiGroup16 = new SelectListGroup() { Name = "技術開発" };
            var GyoumuBunruiGroup17 = new SelectListGroup() { Name = "営業企画" };
            var GyoumuBunruiGroup18 = new SelectListGroup() { Name = "分譲住宅管理" };
            var GyoumuBunruiGroup19 = new SelectListGroup() { Name = "研究開発" };
            var GyoumuBunruiGroup20 = new SelectListGroup() { Name = "事業企画・推進" };
            var GyoumuBunruiGroupZ = new SelectListGroup() { Name = "その他" };
            var GyoumuBunruiItems = new SelectListItem[] {
            new SelectListItem() { Value="1:企画・経営管理", Text="1 :企画・経営管理",Group = GyoumuBunruiGroup1 },
            new SelectListItem() { Value="2:システム開発", Text="2 :システム開発",Group = GyoumuBunruiGroup1 },
            new SelectListItem() { Value="3:総務・文書管理", Text="3 :総務・文書管理",Group = GyoumuBunruiGroup2 },
            new SelectListItem() { Value="4:秘書", Text="4 :秘書",Group = GyoumuBunruiGroup2 },
            new SelectListItem() { Value="5:広報", Text="5 :広報",Group = GyoumuBunruiGroup2 },
            new SelectListItem() { Value="6:法務・コンプライアンス", Text="6 :法務・コンプライアンス",Group = GyoumuBunruiGroup2 },
            new SelectListItem() { Value="7:安全管理・品質管理・産業廃棄物管理", Text="7 :安全管理・品質管理・産業廃棄物管理",Group = GyoumuBunruiGroup3 },
            new SelectListItem() { Value="8:工事契約・材料管理", Text="8 :工事契約・材料管理",Group = GyoumuBunruiGroup3 },
            new SelectListItem() { Value="9:人事任用・採用", Text="9 :人事任用・採用",Group = GyoumuBunruiGroup4 },
            new SelectListItem() { Value="10:給与管理", Text="10:給与管理",Group = GyoumuBunruiGroup4 },
            new SelectListItem() { Value="11:社会保険・労働保険", Text="11:社会保険・労働保険",Group = GyoumuBunruiGroup4 },
            new SelectListItem() { Value="12:研修", Text="12:研修",Group = GyoumuBunruiGroup4 },
            new SelectListItem() { Value="13:労務", Text="13:労務",Group = GyoumuBunruiGroup5 },
            new SelectListItem() { Value="14:福利厚生・共済会", Text="14:福利厚生・共済会",Group = GyoumuBunruiGroup5 },
            new SelectListItem() { Value="15:経理(決算・税務)", Text="15:経理(決算・税務)",Group = GyoumuBunruiGroup6 },
            new SelectListItem() { Value="16:財務(出納・収納)", Text="16:財務(出納・収納)",Group = GyoumuBunruiGroup6 },
            new SelectListItem() { Value="17:工事経理", Text="17:工事経理",Group = GyoumuBunruiGroup6 },

            //2021-01-15 iwai-tamura upd-str ---
            new SelectListItem() { Value="18:CSR活動推進・お客様相談", Text="18:CSR活動推進・お客様相談",Group = GyoumuBunruiGroup7 },
            //new SelectListItem() { Value="18:お客様相談・CS管理", Text="18:お客様相談・CS管理",Group = GyoumuBunruiGroup7 },
            //2021-01-15 iwai-tamura upd-end ---

            new SelectListItem() { Value="19:監査業務", Text="19:監査業務",Group = GyoumuBunruiGroup8 },
            new SelectListItem() { Value="21:団地内清掃点検", Text="21:団地内清掃点検",Group = GyoumuBunruiGroup10 },
            new SelectListItem() { Value="22:団地管理･単身住宅管理･その他の受託等", Text="22:団地管理･単身住宅管理･その他の受託等",Group = GyoumuBunruiGroup11 },
            new SelectListItem() { Value="23:中央監視", Text="23:中央監視",Group = GyoumuBunruiGroup11 },
            new SelectListItem() { Value="24:損害保険・生命保険・商品販売", Text="24:損害保険・生命保険・商品販売",Group = GyoumuBunruiGroup11 },
            new SelectListItem() { Value="25:緊急事故受付管理", Text="25:緊急事故受付管理",Group = GyoumuBunruiGroup11 },
            new SelectListItem() { Value="26:給水施設管理・受水槽清掃等", Text="26:給水施設管理・受水槽清掃等",Group = GyoumuBunruiGroup12 },
            new SelectListItem() { Value="27:汚水施設管理", Text="27:汚水施設管理",Group = GyoumuBunruiGroup12 },
            new SelectListItem() { Value="28:雑排水管清掃等", Text="28:雑排水管清掃等",Group = GyoumuBunruiGroup12 },
            new SelectListItem() { Value="29:給水設備等修繕工事", Text="29:給水設備等修繕工事",Group = GyoumuBunruiGroup12 },
            new SelectListItem() { Value="30:保守点検", Text="30:保守点検",Group = GyoumuBunruiGroup13 },
            new SelectListItem() { Value="31:経常修繕工事", Text="31:経常修繕工事",Group = GyoumuBunruiGroup13 },
            new SelectListItem() { Value="32:空家補修工事", Text="32:空家補修工事",Group = GyoumuBunruiGroup14 },
            new SelectListItem() { Value="33:ライフアップ工事", Text="33:ライフアップ工事",Group = GyoumuBunruiGroup14 },
            new SelectListItem() { Value="34:リニューアル工事", Text="34:リニューアル工事",Group = GyoumuBunruiGroup14 },
            new SelectListItem() { Value="35:賃貸リフォーム・小修理", Text="35:賃貸リフォーム・小修理",Group = GyoumuBunruiGroup14 },
            new SelectListItem() { Value="36:居住環境修繕工事(建築・土木)", Text="36:居住環境修繕工事(建築・土木)",Group = GyoumuBunruiGroup15 },
            new SelectListItem() { Value="37:植栽管理", Text="37:植栽管理",Group = GyoumuBunruiGroup15 },
            new SelectListItem() { Value="38:ストック改修技術開発(調査及び工事)", Text="38:ストック改修技術開発(調査及び工事)",Group = GyoumuBunruiGroup16 },
            new SelectListItem() { Value="39:マーケティング", Text="39:マーケティング",Group = GyoumuBunruiGroup17 },
            new SelectListItem() { Value="40:新規事業開発・商品開発", Text="40:新規事業開発・商品開発",Group = GyoumuBunruiGroup17 },
            new SelectListItem() { Value="41:新規受託営業", Text="41:新規受託営業",Group = GyoumuBunruiGroup18 },
            new SelectListItem() { Value="42:大規模修繕工事等受託営業", Text="42:大規模修繕工事等受託営業",Group = GyoumuBunruiGroup18 },
            new SelectListItem() { Value="43:分譲等事務管理", Text="43:分譲等事務管理",Group = GyoumuBunruiGroup18 },
            new SelectListItem() { Value="44:分譲等清掃", Text="44:分譲等清掃",Group = GyoumuBunruiGroup18 },
            new SelectListItem() { Value="45:分譲等施設管理", Text="45:分譲等施設管理",Group = GyoumuBunruiGroup18 },
            new SelectListItem() { Value="46:分譲リフォーム", Text="46:分譲リフォーム",Group = GyoumuBunruiGroup18 },
            new SelectListItem() { Value="47:分譲工事・特定工事・調査診断", Text="47:分譲工事・特定工事・調査診断",Group = GyoumuBunruiGroup18 },
            new SelectListItem() { Value="48:マンション相談", Text="48:マンション相談",Group = GyoumuBunruiGroup18 },
            new SelectListItem() { Value="49:技術開発研究", Text="49:技術開発研究",Group = GyoumuBunruiGroup19 },
            new SelectListItem() { Value="50:環境分析測定", Text="50:環境分析測定",Group = GyoumuBunruiGroup19 },
            new SelectListItem() { Value="51:新規事業開発", Text="51:新規事業開発",Group = GyoumuBunruiGroup20 },

            //2021-01-15 iwai-tamura upd-str ---
            new SelectListItem() { Value="52:コンビニ等", Text="52:コンビニ等",Group = GyoumuBunruiGroup20 },
            new SelectListItem() { Value="53:商業施設等", Text="53:商業施設等",Group = GyoumuBunruiGroup20 },
            new SelectListItem() { Value="54:ベーカリー等", Text="54:ベーカリー等",Group = GyoumuBunruiGroup20 },
            //new SelectListItem() { Value="52:コンビニ", Text="52:コンビニ",Group = GyoumuBunruiGroup20 },
            //new SelectListItem() { Value="53:商業施設等", Text="53:商業施設等",Group = GyoumuBunruiGroup20 },
            //new SelectListItem() { Value="54:ベーカリー", Text="54:ベーカリー",Group = GyoumuBunruiGroup20 },
            //2021-01-15 iwai-tamura upd-end ---

            new SelectListItem() { Value="ZZ:その他", Text="ZZ:その他",Group = GyoumuBunruiGroupZ }
            };
            //勤務地一覧表
            var KinmuchiGroup1 = new SelectListGroup() { Name = "本社" };
            var KinmuchiGroup2 = new SelectListGroup() { Name = "東京支社" };
            var KinmuchiGroup3 = new SelectListGroup() { Name = "関東支社" };
            var KinmuchiGroup4 = new SelectListGroup() { Name = "大阪支社" };
            var KinmuchiGroup5 = new SelectListGroup() { Name = "名古屋支社" };
            var KinmuchiGroup6 = new SelectListGroup() { Name = "福岡支社" };
            var KinmuchiGroup7 = new SelectListGroup() { Name = "出向" };
            var KinmuchiItems = new SelectListItem[] {
                    new SelectListItem() { Value="1:本社", Text="1 :本社",Group = KinmuchiGroup1 },
                    //2020-12-24 iwai-tamura upd-str ------
                    new SelectListItem() { Value="2:東京支社", Text="2 :東京支社",Group = KinmuchiGroup2 },
                    new SelectListItem() { Value="3:関東支社", Text="3:関東支社",Group = KinmuchiGroup3 },
                    new SelectListItem() { Value="4:大阪支社", Text="4:大阪支社",Group = KinmuchiGroup4 },
                    new SelectListItem() { Value="5:名古屋支社", Text="5:名古屋支社",Group = KinmuchiGroup5 },
                    new SelectListItem() { Value="6:福岡支社", Text="6:福岡支社",Group = KinmuchiGroup6 },
                    new SelectListItem() { Value="7:出向", Text="7:出向",Group = KinmuchiGroup7 }
                    
                    //new SelectListItem() { Value="34:住生活事業本部", Text="34:住生活事業本部",Group = KinmuchiGroup1 },
                    //new SelectListItem() { Value="2:技術開発研究所・技術訓練センター", Text="2 :技術開発研究所・技術訓練センター",Group = KinmuchiGroup1 },
                    //new SelectListItem() { Value="3:緊急自己受付センター", Text="3 :緊急自己受付センター",Group = KinmuchiGroup1 },
                    //new SelectListItem() { Value="4:東京支社", Text="4 :東京支社",Group = KinmuchiGroup2 },
                    //new SelectListItem() { Value="5:東京東支店", Text="5 :東京東支店",Group = KinmuchiGroup2 },
                    //new SelectListItem() { Value="6:城北支店", Text="6 :城北支店",Group = KinmuchiGroup2 },
                    //new SelectListItem() { Value="7:東京北支店", Text="7 :東京北支店",Group = KinmuchiGroup2 },
                    //new SelectListItem() { Value="8:東京南支店", Text="8 :東京南支店",Group = KinmuchiGroup2 },
                    //new SelectListItem() { Value="9:北多摩支店", Text="9 :北多摩支店",Group = KinmuchiGroup2 },
                    //new SelectListItem() { Value="10:南多摩支店", Text="10:南多摩支店",Group = KinmuchiGroup2 },
                    //new SelectListItem() { Value="11:横浜支店", Text="11:横浜支店",Group = KinmuchiGroup2 },
                    //new SelectListItem() { Value="12:横浜南支店", Text="12:横浜南支店",Group = KinmuchiGroup2 },
                    //new SelectListItem() { Value="13:神奈川西支店", Text="13:神奈川西支店",Group = KinmuchiGroup2 },
                    //new SelectListItem() { Value="14:関東支社", Text="14:関東支社",Group = KinmuchiGroup3 },
                    //new SelectListItem() { Value="15:千葉支店", Text="15:千葉支店",Group = KinmuchiGroup3 },
                    //new SelectListItem() { Value="16:千葉西支店", Text="16:千葉西支店",Group = KinmuchiGroup3 },
                    //new SelectListItem() { Value="17:千葉北支店", Text="17:千葉北支店",Group = KinmuchiGroup3 },
                    //new SelectListItem() { Value="18:浦和支店", Text="18:浦和支店",Group = KinmuchiGroup3 },
                    //new SelectListItem() { Value="19:東埼玉支店", Text="19:東埼玉支店",Group = KinmuchiGroup3 },
                    //new SelectListItem() { Value="20:西埼玉支店", Text="20:西埼玉支店",Group = KinmuchiGroup3 },
                    //new SelectListItem() { Value="21:大阪支社", Text="21:大阪支社",Group = KinmuchiGroup4 },
                    //new SelectListItem() { Value="22:大阪中支店", Text="22:大阪中支店",Group = KinmuchiGroup4 },
                    //new SelectListItem() { Value="23:大阪北支店", Text="23:大阪北支店",Group = KinmuchiGroup4 },
                    //new SelectListItem() { Value="24:大阪南支店", Text="24:大阪南支店",Group = KinmuchiGroup4 },
                    //new SelectListItem() { Value="25:兵庫支店", Text="25:兵庫支店",Group = KinmuchiGroup4 },
                    //new SelectListItem() { Value="26:阪神支店", Text="26:阪神支店",Group = KinmuchiGroup4 },
                    //new SelectListItem() { Value="27:奈良支店", Text="27:奈良支店",Group = KinmuchiGroup4 },
                    //new SelectListItem() { Value="28:京都支店", Text="28:京都支店",Group = KinmuchiGroup4 },
                    //new SelectListItem() { Value="29:名古屋支社", Text="29:名古屋支社",Group = KinmuchiGroup5 },
                    //new SelectListItem() { Value="30:名北支店", Text="30:名北支店",Group = KinmuchiGroup5 },
                    //new SelectListItem() { Value="31:福岡支社", Text="31:福岡支社",Group = KinmuchiGroup6 },
                    //new SelectListItem() { Value="32:北九州支店", Text="32:北九州支店",Group = KinmuchiGroup6 },
                    //new SelectListItem() { Value="33:出向", Text="33:出向",Group = KinmuchiGroup7 }
                    //2020-12-24 iwai-tamura upd-end ------
            };

            var ShokumuOtherattr1 = new Dictionary<string, object>() {  { "class", " form-control Shokumu-other1 " }, { "style", "width:300px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } };
            var ShokumuOtherattr2 = new Dictionary<string, object>() {  { "class", " form-control Shokumu-other2 " }, { "style", "width:300px;height:16px;" }, { "size", "2" } , { "rows", "1" },{"maxlength","20"} ,{ "readonly", "readonly" } };
            var Kinmuchiattr1 = new Dictionary<string, object>() {  { "class", "form-control Kinmuchiattr1-other" }, { "size", "10" } ,{"maxlength","20"} ,{ "readonly", "readonly" } };
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:

                    //設定本人・面談者時
                    //計画・方針入力化

                    //2021-03-26 iwai-tamura add-str ------
                    switch (Model.Head.StatusType) {
                        case SelfDeclareStatusType.PrimaryEdit:
                        case SelfDeclareStatusType.PrimaryConfirm:
                            if (Model.Body.TransferDutyDepartment_1_1.Length > 2) {
                                if ((Model.Body.TransferDutyDepartment_1_1.Substring(0, 2) == "ZZ")) {
                                    ShokumuOtherattr1.Remove("readonly");
                                }
                            }
                            if (Model.Body.TransferDutyDepartment_1_2.Length > 2) {
                                if ((Model.Body.TransferDutyDepartment_1_2.Substring(0, 2) == "ZZ")) {
                                    ShokumuOtherattr2.Remove("readonly");
                                }
                            }

                            if (Model.Body.TransferDutyDepartment_2_1.Length > 1) {
                                if ((Model.Body.TransferDutyDepartment_2_1.Substring(0, 1) == "7")) {
                                    Kinmuchiattr1.Remove("readonly");
                                }
                            }
                            if (Model.Body.TransferDutyDepartment_2_2.Length > 1) {
                                if ((Model.Body.TransferDutyDepartment_2_2.Substring(0, 1) == "7")) {
                                    Kinmuchiattr1.Remove("readonly");
                                }
                            }
                            if (Model.Body.TransferDutyDepartment_2_3.Length > 1) {
                                if ((Model.Body.TransferDutyDepartment_2_3.Substring(0, 1) == "7")) {
                                    Kinmuchiattr1.Remove("readonly");
                                }
                            }
                            break;
                        case SelfDeclareStatusType.SecondaryEdit:
                        case SelfDeclareStatusType.SecondaryConfirm:
                            break;
                    }
                    //if (Model.Body.TransferDutyDepartment_1_1.Length > 2) {
                    //    if ((Model.Body.TransferDutyDepartment_1_1.Substring(0, 2) == "ZZ")) {
                    //        ShokumuOtherattr1.Remove("readonly");
                    //    }
                    //}
                    //if (Model.Body.TransferDutyDepartment_1_2.Length > 2) {
                    //    if ((Model.Body.TransferDutyDepartment_1_2.Substring(0, 2) == "ZZ")) {
                    //        ShokumuOtherattr2.Remove("readonly");
                    //    }
                    //}

                    //if (Model.Body.TransferDutyDepartment_2_1.Length > 1) {
                    //    if ((Model.Body.TransferDutyDepartment_2_1.Substring(0, 1) == "7")) {
                    //        Kinmuchiattr1.Remove("readonly");
                    //    }
                    //}
                    //if (Model.Body.TransferDutyDepartment_2_2.Length > 1) {
                    //    if ((Model.Body.TransferDutyDepartment_2_2.Substring(0, 1) == "7")) {
                    //        Kinmuchiattr1.Remove("readonly");
                    //    }
                    //}
                    //if (Model.Body.TransferDutyDepartment_2_3.Length > 1) {
                    //    if ((Model.Body.TransferDutyDepartment_2_3.Substring(0, 1) == "7")) {
                    //        Kinmuchiattr1.Remove("readonly");
                    //    }
                    //}
                    //2021-03-26 iwai-tamura add-end ------
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }

            @helper setShokumu1(bool isRead, string label, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            <div style="display:flex;">
                                <label class="w70" style="font-weight:normal;">@label</label> @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 250px;height:16px; vertical-align:top;" })
                            </div>
                        } else {
                            <label class="w70" style="font-weight:normal;">@label</label> @Html.DropDownList(id,selItems, "", new { @class = "Shokumu-select1" , style = "width: 250px; vertical-align:top;" })
                        }
                    }
                </div>
            }

            @helper setShokumu2(bool isRead, string label, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            <div style="display:flex;">
                                <label class="w70" style="font-weight:normal;">@label</label> @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 250px;height:16px; vertical-align:top;" })
                            </div>
                        } else {
                            <label class="w70" style="font-weight:normal;">@label</label> @Html.DropDownList(id,selItems, "", new { @class = "Shokumu-select2" , style = "width: 250px; vertical-align:top;" })
                        }
                    }
                </div>
            }

            @helper setKinmuchi(bool isRead, string label, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            <div style="display:flex;">
                                <label class="w70" style="font-weight:normal;">@label</label> @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 250px;height:16px; vertical-align:top;" })
                            </div>
                        } else {
                            <label class="w70" style="font-weight:normal;">@label</label> @Html.DropDownList(id,selItems, "", new { @class = "GyoumuBunrui-select" , style = "width: 250px; vertical-align:top;" })
                        }
                    }
                </div>
            }
	    }
        <div class="col-xs-7">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td colspan="2">
                            (1) 職務変更や配置換えについて、上司と共有化しておきたい意見、希望などがあれば具体的に記入してください。<br>
                            　　または、自分の健康上の問題、育児や家族の介護等、配置換え(広域異動含む)において配慮してほしい事由がある場合は、<br>
                            　考慮してほしい内容を含めて具体的に記入してください。<br>
                            　　なお、前述の理由により広域異動できない者については、速やかに「職群転換申請書」を提出すること。
                            <br>
                            　　※選択肢の業務は例示です。選択肢にない業務については、その他を選択のうえ、直接記入してください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="border-style:none ;"  colspan="2">
                            @Html.TextAreaFor(m => m.Body.TransferDutyDepartment_1_Content, question1)
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2" style="border-style:none ;">
                            <label class="w20" style="vertical-align: top;font-weight:normal;">※職務変更についての具体的内容については、２つ以内で希望するものを選んでください。</label>
                        </td>
                    </tr>
                    <tr>
                        <td style="border-style:none ;" >
                            @*2021-03-26 iwai-tamura upd str ------*@
                            @setShokumu1(PrimaryEdit, "希望職務1", "TransferDutyDepartment_1_1", Model.Body.TransferDutyDepartment_1_1, GyoumuBunruiItems)
                            @*@setShokumu1(ReadOption, "希望職務1", "TransferDutyDepartment_1_1", Model.Body.TransferDutyDepartment_1_1, GyoumuBunruiItems)*@
                            @*2021-03-26 iwai-tamura upd end ------*@
                        </td>
                        <td style="border-style:none ;" >
                            <div class="h24 form-inline">
                                <label class="w20" style="vertical-align: top;font-weight:normal;">その他</label>
                                @Html.TextBoxFor(m => m.Body.TransferDutyDepartment_1_1_Other, ShokumuOtherattr1)
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td style="border-style:none ;" >
                            @*2021-03-26 iwai-tamura upd str ------*@
                            @setShokumu2(PrimaryEdit, "希望職務2", "TransferDutyDepartment_1_2", Model.Body.TransferDutyDepartment_1_2, GyoumuBunruiItems)
                            @*@setShokumu2(ReadOption, "希望職務2", "TransferDutyDepartment_1_2", Model.Body.TransferDutyDepartment_1_2, GyoumuBunruiItems)*@
                            @*2021-03-26 iwai-tamura upd end ------*@
                        </td>
                        <td style="border-style:none ;">
                            <div class="h24 form-inline">
                                <label class="w20" style="vertical-align: top;font-weight:normal;">その他</label>
                                @Html.TextBoxFor(m => m.Body.TransferDutyDepartment_1_2_Other, ShokumuOtherattr2)
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="col-xs-8">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td colspan="2">
                            (2) 配置換え希望の有無に関わらず、次回の配置換えにおいて希望する勤務地３箇所を選択してください。<br>
                            　　なお、本社、東京支社、関東支社所属の人については、同一支社２箇所以内で選んでください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="border-style:none ;">
                            @*2021-03-26 iwai-tamura upd str ------*@
                            @setKinmuchi(PrimaryEdit, "希望勤務地1", "TransferDutyDepartment_2_1", Model.Body.TransferDutyDepartment_2_1, KinmuchiItems)
                            @setKinmuchi(PrimaryEdit, "希望勤務地2", "TransferDutyDepartment_2_2", Model.Body.TransferDutyDepartment_2_2, KinmuchiItems)
                            @setKinmuchi(PrimaryEdit, "希望勤務地3", "TransferDutyDepartment_2_3", Model.Body.TransferDutyDepartment_2_3, KinmuchiItems)
                            @*@setKinmuchi(ReadOption, "希望勤務地1", "TransferDutyDepartment_2_1", Model.Body.TransferDutyDepartment_2_1, KinmuchiItems)*@
                            @*@setKinmuchi(ReadOption, "希望勤務地2", "TransferDutyDepartment_2_2", Model.Body.TransferDutyDepartment_2_2, KinmuchiItems)*@
                            @*@setKinmuchi(ReadOption, "希望勤務地3", "TransferDutyDepartment_2_3", Model.Body.TransferDutyDepartment_2_3, KinmuchiItems)*@
                            @*2021-03-26 iwai-tamura upd end ------*@
                        </td>
                        <td style="border-style:none ;vertical-align:top">
                            <label style="font-weight:normal;">出向を選んだ場合に記入してください。</label>
                        	<div style="margin-top:5px" >
                                <label style="font-weight:normal;">出向先&nbsp;</label>@Html.TextAreaFor(m => m.Body.TransferDutyDepartment_2_Other, Kinmuchiattr1)
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <h4 style="margin-top:20px;">5 能力開発について</h4>
    <!-- 能力開発について -->
    <div class="row">
        @*定義*@
        @{
            //自己評価選択リスト
            var JikohyoukaItems = new SelectListItem[] {
                    new SelectListItem() { Value="1:大変満足", Text="1 :大変満足"},
                    new SelectListItem() { Value="2:概ね満足", Text="2 :概ね満足"},
                    new SelectListItem() { Value="3:やや不満足", Text="3 :やや不満足"},
                    new SelectListItem() { Value="4:不満足", Text="4 :不満足"}
            };

            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:

                    //設定本人・面談者時
                    //計画・方針入力化
                    ShokumuOtherattr1.Remove("readonly");
                    ShokumuOtherattr2.Remove("readonly");
                    Kinmuchiattr1.Remove("readonly");
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }

            @helper setJikohyouka(bool isRead, int cnt, string label, string name, string value, SelectListItem[] selItems) {
                <div class="h24">
                    @{
                        var id = string.Format("Body.{0}", name);
                        if (isRead) {
                            <label class="w20" style="font-weight:normal;">@label</label> @Html.TextBox(id, value, new { @class = "form-control", @readonly = "readonly", style = "width: 100px;height:16px; vertical-align:top;" })
                        } else {
                            <label class="w20" style="font-weight:normal;">@label</label> @Html.DropDownList(id, selItems, "", new { @class = "jikohyouka", style = "width: 100px; vertical-align:top;" })
                        }
                    }
                </div>
}
        }
        <div class="col-xs-7">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td>
                            (1) この１年間の自分の能力開発に向けた取り組みについて、その内容を具体的に記入し自己評価を行ってください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td style="border-style:none ;">
                            能力開発の内容
                            @Html.TextAreaFor(m => m.Body.AptitudeDevelop_1_1, question1_r)
                        </td>
                    </tr>
                    <tr>
                        <td style="border-style:none ; padding-top:10px">
                            @*2021-03-26 iwai-tamura upd str ------*@
                            @setJikohyouka(SecondaryEdit, 1, "自己評価", "AptitudeDevelop_1_2", Model.Body.AptitudeDevelop_1_2, JikohyoukaItems)
                            @*@setJikohyouka(true, 1, "自己評価", "AptitudeDevelop_1_2", Model.Body.AptitudeDevelop_1_2, JikohyoukaItems)*@
                            @*2021-03-26 iwai-tamura upd end ------*@
                        </td>
                    </tr>
                    <tr>
                        <td style="border-style:none ;">
                            理由
                            @Html.TextAreaFor(m => m.Body.AptitudeDevelop_1_3, question1_r)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-6">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td>
                            (2) 自分が今後、高めていきたい専門的な能力や技術について具体的に記入してください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @Html.TextAreaFor(m => m.Body.AptitudeDevelop_2, question1_r)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="row">
        <div class="col-xs-6">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td>
                            (3) これから受けたい教育・研修（社内外を問わず）、資格、免許等、あるいは現在の職務に直接関係するものに限らず、あなたが<br />
                            特に興味・関心を持って研究・勉強している（またはこれから研究・勉強したい）事項があれば具体的に記入してください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @Html.TextAreaFor(m => m.Body.AptitudeDevelop_3, question1_r)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <h4 style="margin-top:20px;">6 自由意見</h4>
    <!-- 自由意見 -->
    <div class="row">
	    @*定義*@
        @{
            var Frreattr1 = new Dictionary<string, object>() { { "class", "form-control" }, { "rows", "8" }, { "maxlength", "1000" }, { "readonly", "readonly" } };
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCSelfSign:

                    //設定本人・面談者時
                    //計画・方針入力化
                    Frreattr1.Remove("readonly");
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }
	    }
        <div class="col-xs-8">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td>
                            会社に知っておいて欲しい個人情報や特に述べたいことがあれば自由に記入してください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td >
                            @Html.TextAreaFor(m => m.Body.FreeComment, Frreattr1)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="col-xs-10">
        <hr style="margin: 0 -20px;margin-top:20px; border:none;border-top:dashed 1px #B0B0B0;height:1px;color:#FFFFFF;">
    </div>

    <div class="col-xs-10">
        <h4>【上司記入欄】</h4>
    </div>
    <!-- 上司記入欄 -->
    <div class="row">
	    @*定義*@
        @{
            var Bossattr1 = new Dictionary<string, object>() { { "class", "form-control" }, { "rows", "8" }, { "maxlength", "1000" }, { "readonly", "readonly" } };
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCBossSign:

                    //設定本人・面談者時
                    //計画・方針入力化
                    Bossattr1.Remove("readonly");
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }
            //2020-12-24 iwai-tamura upd-str ------
            var Bossattr1_r = new Dictionary<string, object>() { { "class", "form-control" }, { "rows", "8" }, { "maxlength", "1000" }, { "readonly", "readonly" } };
            //2020-12-24 iwai-tamura upd-end ------

            //2021-03-26 iwai-tamura add-str ------
            switch (Model.Head.InputMode) {
                case SelfDeclareMode.AtoCBossSign:
                    //設定本人・面談者時
                    //計画・方針入力化
                    switch (Model.Head.StatusType) {
                        case SelfDeclareStatusType.PrimaryEdit:
                        case SelfDeclareStatusType.PrimaryConfirm:
                            break;
                        case SelfDeclareStatusType.SecondaryEdit:
                        case SelfDeclareStatusType.SecondaryConfirm:
                            Bossattr1_r.Remove("readonly");
                            break;
                    }
                    break;
                default:
                    //上記以外 ReadOnly
                    break;
            }
            //2021-03-26 iwai-tamura add-end ------
	    }
        <div class="col-xs-8">
            <table class="table table-bordered">
                <thead>
                    <tr class="info">
                        <td>
                            育成面談においてアドバイスしたこと、2-(3) に対する具体的な対応などについて記入してください。
                        </td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td >
                            @Html.TextAreaFor(m => m.Body.BossComment, Bossattr1_r)
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>



        @*隠しボタンエリア*@
        <div style="height:0px;">
            <button type="submit" name="Save" id="savebutton" value="保存" class="btn invisible">保存</button>
            <button type="submit" name="PrevDataCopy" id="prevdatacopybutton" value="前回データ取得" class="btn invisible">前回データ取得</button>
            <button type="submit" name="Save2Print" id="save2printbutton" value="保存PDF出力" class="btn invisible">保存PDF出力</button>

            <button type="submit" name="Signature" id="11" value="1,1" class="btn invisible">本人</button>
            <button type="submit" name="Signature" id="12" value="1,2" class="btn invisible">上司</button>
            <button type="submit" name="SignCancel" id="c11" value="1,1" class="btn invisible">本人</button>
            <button type="submit" name="SignCancel" id="c12" value="1,2" class="btn invisible">上司</button>
        </div>

        @Scripts.Render("~/Scripts/js/selfdec")

        }
